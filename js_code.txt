import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { Provider } from "react-redux";
import {
  applyMiddleware,
  legacy_createStore as createStore,
  compose,
} from "redux";
import promiseMiddleware from "redux-promise";
import ReduxThunk from "redux-thunk";
import persistedReducer from "./_reducers"; // index.js 작성 안해도 알아서 처리함
import { persistStore } from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";

const root = ReactDOM.createRoot(document.getElementById("root"));
const store = createStore(
  persistedReducer,
  compose(
    applyMiddleware(promiseMiddleware, ReduxThunk),
    window.__REDUX_DEVTOOLS_EXTENSION__
      ? window.__REDUX_DEVTOOLS_EXTENSION__()
      : (f) => f
  )
);

const persistor = persistStore(store);

root.render(
  //<React.StrictMode> // render 이중 호출 비활성화
  <Provider store={store}>
    <PersistGate persistor={persistor}>
      <App />
    </PersistGate>
  </Provider>
  //</React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import MainPage from './pages/MainPage';
import KakaoRedirectHandler from './components/login/KakaoRedirectHandler';
import MapPage from './pages/MapPage';
import ReviewPage from "./pages/ReviewPage";
import StoreDetailPage from "./pages/StoreDetailPage";
import AboutPage from "./pages/AboutPage";
import MyPage from './pages/MyPage';
import "swiper/css/bundle";
import './App.css';

function App() {
  return (
    <BrowserRouter>
      <div className="App">
        <Routes>
          <Route exact path="/" element={<MainPage />} />
          <Route
            path="/user-service/auth/kakao"
            element={<KakaoRedirectHandler />}
          />
          <Route path="/map" element={<MapPage />} />
          <Route path="/review/*" element={<ReviewPage />} />
          <Route path="/detail/*" element={<StoreDetailPage/>}/>
          <Route path="/about" element={<AboutPage/>}/>
          <Route path="/mypage" element={<MyPage />} />
        </Routes>
      </div>
    </BrowserRouter>
  );
}

export default App;
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
import { combineReducers } from "redux";
import userReducer from "./user_reducer";
import { persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";

const persistConfig = {
  key: "root",
  storage,
};

const rootReducer = combineReducers({
  // reducer 모음
  userReducer,
});

const persistedReducer = persistReducer(persistConfig, rootReducer);

export default persistedReducer;
const initialState = {
    userinfo: null,
}
  
export default function userReducer(state = initialState, action) {
    switch (action.type) {
        case "CHANGE_USERINFO":
        return {
            ...state,
            userinfo: action.payload,
        }
        case "REISSUE_JWT":
        return {
            ...state,
            userinfo: action.payload,
        }
        default:
            return state
    }
}export const changeUserInfo = (res) => {
    return {
     type: "CHANGE_USERINFO",
     payload: res
    }
}
export const reissueJWT = (res) => {
    return {
     type: "REISSUE_JWT",
     payload: res
    }
}import { createContext } from 'react';

export const MarkerContext = createContext({
    marker: [],
});
import { createContext } from 'react';

export const SearchContext = createContext({
    info: [],
    value: '',
    text: '',
});
import React from 'react';
import Carousel from '../components/etc/Carousel';
import MobileCarousel from '../components/etc/mobile/MobileCarousel';
import NavBar from '../components/navigation/NavBar';
import MobileNavBar from '../components/navigation/mobile/MobileNavBar';
import RecommendedList from '../components/etc/RecommendedList';
import RecentReview from "../components/review/RecentReview";
import { useMediaQuery } from "react-responsive"
import { Container } from 'react-bootstrap';

function MainPage() {
  const isPc = useMediaQuery({ query: "(min-width:481px)" });
  const isMobile = useMediaQuery({ query: "(max-width:480px)" });

  const pcCarouselData = [
    {
      image: "img/main-carousel/main-carousel-1.png",
      link: "/map"
    },
    {
      image: "img/main-carousel/main-carousel-2.png",
      link: "/about"
    },
    {
      image: "img/main-carousel/main-carousel-3.png",
      link: "/detail/성수완당 본점"
    }
  ];
  const mobileCarouselData = [
    {
      image: "img/main-carousel/main-carousel-mobile-1.png",
      link: "/map"
    },
    {
      image: "img/main-carousel/main-carousel-mobile-2.png",
      link: "/about"
    },
    {
      image: "img/main-carousel/main-carousel-mobile-3.png",
      link: "/detail/성수완당 본점"
    }
  ];

  return (
    <>
      {isPc && <NavBar />}
      {isMobile && <MobileNavBar />}
      {isPc &&
      <Carousel
        dataList={pcCarouselData}
        outerViewWidth={"900px"}
        outerViewHeight={"400px"}
        imageWidth={"100%"}
        imageHeight={"100%"}
        imageRadius={15}
        gap={100}
        innerViewOverflow={"visible"}
        buttonSize={70}
        scrollStep={"full"}
        autoScroll={true}
        showBullets={true}
      />
      }
      {isMobile &&
      <MobileCarousel
        dataList={mobileCarouselData}
        width={"90vw"}
        height={"50vw"}
        imageRadius={15}
        gap={0}
        innerViewOverflow={"hidden"}
        scrollStep={"full"}
        autoScroll={true}
        showBullets={true}
      />
      }
      {/* <Carousel
        dataList={testData}
        outerViewWidth={"580px"}
        outerViewHeight={"200px"}
        imageWidth={"200px"}
        imageHeight={"200px"}
        imageRadius={5}
        gap={40}
        innerViewOverflow={"hidden"}
        buttonSize={50}
        scrollStep={"one"}
        autoScroll={false}
        showBullets={false}
      /> */}
      {isPc &&
      <Container fluid="xxl" style={{ width: "75%", maxWidth: "1200px", height: "100%", padding: "50px 0px 100px 0px"}}>
        <RecommendedList />
        <RecentReview />
      </Container>
      }
      {isMobile &&
      <Container fluid="xxl" style={{ width: "100%", height: "100%", padding: "20px 0px 100px 0px"}}>
        <RecommendedList />
        <RecentReview />
      </Container>
      }
    </>
  );
}

export default MainPage;
/* global kakao */

import React, { useState, useEffect, useContext } from 'react';

import NavBar from '../components/navigation/NavBar';
import MapContainer from '../components/map/MapContainer';
import MapSearchBar from '../components/map/MapSearchBar';
import MapCourse from '../components/map/MapCourse';
import CategoryBtn from '../components/map/CategoryBtn';
import ListCard from '../components/map/ListCard';

import styles from './MapPage.module.css';
import { SearchContext } from '../context/SearchContext';
import { MarkerContext } from '../context/MarkerContext';
import { useMediaQuery } from "react-responsive"
import MobileNavBar from "../components/navigation/mobile/MobileNavBar";
import NoContent from '../components/etc/mobile/NoContent';

function MapPage() {
    const [clickInformation, setClickInformation] = useState();
    const [listInformation, setListInformation] = useState();
    const [selectedType, setSelectedType] = useState();
    const [listCardOn, setListCardOn] = useState(false);
    const [viewCourseComponent, setViewCourseComponent] = useState(false);
    const [point, setPoint] = useState({});
    const [courseLine, setCourseLine] = useState([]);
    const [courseNum, setCourseNum] = useState();

    const [gpsLoc, setGpsLoc] = useState({
        lat: 0,
        lng: 0,
    });
    const [inputText, setInputText] = useState();
    const [searchInformation, setSearchInformation] = useState({ info: [], value: '', text: '' });
    const [markerInformation, setMarkerInformation] = useState({ marker: [] });
    const [clickMarkerInformation, setClickMarkerInformation] = useState({information:null, type:null, id:null}); // information value from marker click event
    const [overlayLatLng, setOverlayLatLng] = useState({lat:null, lng:null, name:null});
    const [onCloseOverlay, setOnCloseOverlay] = useState(false);

    const getClickInfo = (info) => {
        setClickInformation(info);
    };

    const getClickInformation = (res) => {
        //console.log(res);
    };

    const getSearchBarInfo = (item) => {
        if (item !== undefined) {
            if (item.info) {
                setListInformation(item.info);
                setSelectedType(item.value);
                setInputText(item.text);
                if (item.text != '') {
                    setListCardOn(true);
                }
            }
        }
    };

    const clickAddCourse = (info) => {
        setViewCourseComponent(true);
        setPoint(info);
    };

    /*useEffect(() => {
    }, [point]);*/

    useEffect(() => {
        if (clickInformation !== undefined) {
            setInfoCard(true);
        }
    }, [clickInformation]);

    const clearCoursePoint = () => {
        setPoint(null);
    };

    const drawCourse = (point) => {
        setCourseLine([]);
        setCourseLine(point);
        setCourseNum(point.length);
    };

    const closeCourseComponent = () => {
        setViewCourseComponent(false);
        setCourseLine([]);
        setCourseNum(0);
    };

    const checkCourseNum = () => {
        // to return course point length
    };

    const returnCourseNum = (num) => {
        setCourseNum(num);
    };

    /* Marker && Recommend Course Click Event */
    const clickMarker = (info) => {
        if(info !== null) {
            setClickMarkerInformation({information:info, type:info.type, id:info.id});
        }
    };

    const clickRecommendCourse = (info) => {
        if(info !== null) {
            // Using the marker click function with(because of) the same action
            setClickMarkerInformation({information:info, type:"여행지", id:info.tourId.content_id});
        }
    }

    const clearClickMarkerInfo = () => {
        setClickMarkerInformation({information:null, type:null, id:null});
    }

    const getOverlayLatLng = (info) => {
        if(info.lat !== null) {
            setOverlayLatLng({lat:info.lat, lng:info.lng, name:info.name});
        }
    }

    const closeOverlay = (info) => {
        setOnCloseOverlay(info);
    };

    useEffect(() => {
        if(onCloseOverlay == true) {
            //props.closeOverlay(onCloseOverlay);
        }
        setOnCloseOverlay(false); // reset data
    }, [onCloseOverlay]);

    /*const getGpsLoc = (info) => {
    setGpsLoc({
      lat: info.lat,
      lng: info.lng,
    });
  };

  function getUserLoc() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        //alert(position.coords.latitude+""+position.coords.longitude);
        setGpsLoc({
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        });
      }, function(error) {
        console.error(error);
      }, {
        enableHighAccuracy: true,
        maximumAge: 0,
        timeout: Infinity
      });
    } else {
      alert('GPS를 지원하지 않습니다');
    }
  }

  useEffect(() => {
    getUserLoc();
  }, []);*/

    const isPc = useMediaQuery({ query: "(min-width:481px)" });
    const isMobile = useMediaQuery({ query: "(max-width:480px)" });

    return (
        <>
            <SearchContext.Provider value={{ searchInformation, setSearchInformation }}>
                <MarkerContext.Provider value={{ markerInformation, setMarkerInformation }}>
                    <div>
                    {isPc && <NavBar />}
                    {isMobile && <MobileNavBar />}
                    </div>

                    {/*<CategoryBtn propFunction={getGpsLoc} gpsInformation={gpsLoc} />*/}
                    <div>
                    {isMobile && <NoContent/>}
                    {isPc &&
                    <div className="styles.map">
                        {listCardOn ? (
                            <ListCard
                                listInformation={listInformation}
                                selectedType={selectedType}
                                propFunction={getClickInfo}
                                clickAddCourse={clickAddCourse}
                                inputText={inputText}
                                getClickInformation={getClickInformation}
                                checkCourseNum={checkCourseNum}
                                courseNum={courseNum}
                                markerInformation={clickMarkerInformation}
                                clearClickMarkerInfo={clearClickMarkerInfo}
                                getOverlayLatLng={getOverlayLatLng}
                                closeOverlay={closeOverlay}
                            />
                        ) : null}

                        <MapSearchBar propFunction={getSearchBarInfo} />

                        {viewCourseComponent ? (
                            <MapCourse
                                point={point}
                                clearCoursePoint={clearCoursePoint}
                                drawCourse={drawCourse}
                                closeCourseComponent={closeCourseComponent}
                                checkCourseNum={checkCourseNum}
                                returnCourseNum={returnCourseNum}
                                clickRecommendCourse={clickRecommendCourse}
                                getOverlayLatLng={getOverlayLatLng}
                            />
                        ) : null}
                        <MapContainer
                            markerInformation={listInformation}
                            clickedInformation={clickInformation}
                            courseLine={courseLine}
                            gpsInformation={gpsLoc}
                            propFunction={clickAddCourse}
                            clickMarker={clickMarker}
                            clearClickMarker={clearClickMarkerInfo}
                            overlayLatLng={overlayLatLng}
                            onCloseOverlay={onCloseOverlay}
                        />
                    </div>}
                    </div>
                </MarkerContext.Provider>
            </SearchContext.Provider>
            
        </>
    );
}

export default MapPage;
import React from "react";
import NavBar from '../components/navigation/NavBar';
import styles from './AboutPage.module.css';
import { useMediaQuery } from "react-responsive"
import MobileNavBar from '../components/navigation/mobile/MobileNavBar';

// 모바일 화면 넘침 방지 함수
function setScreenSize() {
    let vh = window.innerHeight * 0.01;

    document.documentElement.style.setProperty('--vh', `${vh}px`);
    }

    setScreenSize();

function AboutPage(){
    const isPc = useMediaQuery({ query: "(min-width:481px)" });
    const isMobile = useMediaQuery({ query: "(max-width:480px)" });

    return(
    <>
        {isPc && <NavBar />}
        {isMobile && <MobileNavBar />}
        <div className={styles.scrollContainer}>
        <div className={styles.section}>
        <div className={styles.bgLogo}>
                <img className={styles.aboutimg} src="/img/logo-character.svg" alt="banner1 mockup" />
            </div>
            <div className={styles.banner1}>
                <h1>잇츠메이트와 함께
                <br />
                혼행 라이프를 즐겨보세요</h1>
                <h6>잇츠 메이트는 누구나 눈치보지 않고 혼자 즐길 수 있는
                <br />
                건강한 문화를 만들어가고 있습니다</h6>
                </div>
                <div className={styles.macMockup}>
                    { <img className={styles.aboutimg} src="/img/main-pc-72.png" alt="banner1 mockup" /> }
                </div>
            </div>
            <div className={styles.section}>
                <div className={styles.banner2}>
                    <div className={styles.numbers}>01</div>
                    <h2>식당 탐색하기</h2>
                    <h6>실시간 인기 맛집과 생생한 후기들을 만나보세요</h6>
                    <img className={styles.aboutimg} src="/img/banner2-page.jpg" alt="banner2 page image" />
                    <div className={styles.floating}>
                        <img className={styles.aboutimg} src="/img/float-icons.png" alt="banner2 float icon" />
                    </div>
                    <div className={styles.banner2icon}>
                        <div className={styles.icon1}>
                            <img className={styles.aboutimg} src="/img/banner2-01.png" alt="banner2 background icon1" />
                        </div>
                        <div className={styles.icon2}>
                            <img className={styles.aboutimg} src="/img/banner2-02.png" alt="banner2 background icon2" />
                        </div>
                        <div className={styles.icon3}>
                            <img className={styles.aboutimg} src="/img/banner2-03.png" alt="banner2 background icon3" />
                        </div>
                    </div>
                </div>
        </div>
            <div className={styles.section}>
                <div className={styles.banner3}>
                    <div className={styles.numbers}>02</div>
                    <h2>나만의 혼행 코스 만들기</h2>
                    <h6>혼밥만 하기 아쉽다면 한국관광공사 데이터 기반으로 혼자 가기 좋은 곳을 추천해드릴게요 <br />
                    가고 싶은 장소들을 골라 직접 코스를 만들고 떠나보세요</h6>
                    <img src="/img/banner3-map.png" alt="banner3 page image" />
                    <div className={styles.icon1}>
                            <img className={styles.aboutimg} src="/img/banner3-01.png" alt="banner3 background icon1" />
                        </div>
                        <div className={styles.icon2}>
                            <img className={styles.aboutimg} src="/img/banner3-02.png" alt="banner3 background icon2" />
                        </div>
                        <div className={styles.mapPop1}>
                            <img className={styles.mapPopup1} src="/img/map-popup1.png" alt="banner2 popup image 1" /> 
                        </div>   
                    </div>
                </div>
            <div className={styles.section}>
                <div className={styles.banner4}>
                    <div className={styles.numbers}>03</div>
                    <h2>혼행 경험 공유하기</h2>
                    <h6>잇츠 메이트로 장소를 탐색하고 다녀온 혼행 경험을<br />
                        다른 메이트들과 공유하고, 나만의 기록으로 남겨보세요!</h6>
                    <img className={styles.aboutimg} src="/img/banner4-myPage.png" alt="banner4 page image" />
                    <div className={styles.icon1}>
                            <img className={styles.aboutimg} src="/img/banner4-01.png" alt="banner2 background icon1" />
                        </div>
                        <div className={styles.icon2}>
                            <img className={styles.aboutimg} src="/img/banner4-02.png" alt="banner2 background icon2" />
                        </div>
                        <div className={styles.icon3}>
                            <img className={styles.aboutimg} src="/img/banner4-03.png" alt="banner2 background icon3" />
                        </div>
                </div>
            </div>
        </div>
    </>
    );
}

export default AboutPage;import React, { useEffect } from "react";
import axios from 'axios';
import MainReview from "../components/review/MainReview";
import MainGageInfo from "../components/review/MainGageInfo";
import DetailMap from "../components/review/DetailMap";
import { useNavigate, useLocation } from "react-router";
import { Container } from "react-bootstrap";
import NavBar from "../components/navigation/NavBar";
import ReviewModal from "../components/review/ReviewModal";
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { changeUserInfo, reissueJWT } from '../_actions/user_action';
import { useMediaQuery } from "react-responsive"
import MobileNavBar from "../components/navigation/mobile/MobileNavBar";
import NoContent from '../components/etc/mobile/NoContent';

function StoreDetailPage(){
    const SERVER = "eats-mate.com:8081"
    const userinfo = useSelector((state) => state.userReducer.userinfo)
    const dispatch = useDispatch();
    const navigate = useNavigate();

    // 하단 placeName 할당 코드 절대 수정 금지 - 21/09/09
    const placeName = useLocation().pathname.split("/").pop();

    const [modalOpen, setModalOpen] = useState(false);
    const [information, setInformation] = useState({});

    const isPc = useMediaQuery({ query: "(min-width:481px)" });
    const isMobile = useMediaQuery({ query: "(max-width:480px)" });

    useEffect(() => {
      getStoreDetail();
    }, []);
  
    async function getStoreDetail() {
      try {
        const res = await axios.get("https://" + SERVER + "/map-service/findByName/?name=" + placeName);
        setInformation(res.data)
      } catch(e){
        console.log(e)
        alert("해당 식당 정보가 없습니다.")
        navigate(-1);
      }
    }

    const showModal = () => {
        setModalOpen(true);
    }
    const closeModal = () => {
        setModalOpen(false);
    }

    async function checkExp() {
      if(userinfo != null) {
        const isTokenExpired = Date.now() >= userinfo.expirationTime - 10000;
        console.log('Date.now(): ', Date.now());
        console.log('exp - 10s: ', userinfo.expirationTime - 10000);
        console.log('isTokenExpired: ', isTokenExpired);
  
        if (isTokenExpired) {
          // invalid
          console.log("*** ACCESS TOKEN OUTDATED ***")
          try {
            const res = await axios.get("https://" + SERVER + "/user-service/auth/reissue",
              {
                withCredentials: true // Set-Cookie 작동을 위해 필수
              }
            );
            console.log(dispatch(reissueJWT(res.data)))
            showModal();
  
          } catch(e) {
            console.log(e);
            console.log("*** REFRESH TOKEN OUTDATED ***")
            window.alert("로그인이 필요합니다.");  
            await logOut(); // rt outdated
          }
        }
        else {
          // valid
          console.log("*** VALID USERINFO ***")
          showModal();
        }
      }
      else {
        // not logged in
        console.log("*** NOT LOGGED IN ***")
        window.alert("로그인이 필요합니다.");
        await logOut(); // rt outdated
      }
    }

    async function logOut() {
      // logout
      try {
        const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
            {
                withCredentials: true // Set-Cookie 작동을 위해 필수
            }
        );
      } catch(e) {
          console.warn(e);
      }
      dispatch(changeUserInfo(null))
    }

    return(
        <>
          {isPc && <NavBar />}
          {isMobile && <MobileNavBar/>}
          {isMobile && <NoContent/>}
          {isPc &&
          <Container fluid="xxl" style={{ width: "75%", height: "100%", padding: "10px 0px 100px 0px"}}>
              <div>
                  <MainGageInfo information={information}/>
                  <DetailMap information={information} />
                  <MainReview information={information} showModal={checkExp}/>
              </div>
              { modalOpen ? <ReviewModal information={information} closeModal={closeModal}/> : null }
          </Container>
          }
        </>
    );
}

export default StoreDetailPage;import React, { useState, useEffect } from 'react';
import axios from 'axios';
import styles from "./MyPage.module.css"
import { Container, Image } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import NavBar from '../components/navigation/NavBar';
import { useNavigate } from 'react-router-dom';
import { changeUserInfo, reissueJWT } from '../_actions/user_action';
import Course from '../components/mypage/Course';
import Like from '../components/mypage/Like';
import Review from '../components/mypage/Review';
import Dropdown from '../components/etc/Dropdown';
import { ReactComponent as KakaoCircleSvg } from "../images/svg/kakao-circle.svg";
import { useMediaQuery } from "react-responsive"
import MobileNavBar from "../components/navigation/mobile/MobileNavBar";
import NoContent from '../components/etc/mobile/NoContent';

function MyPage() {
  const SERVER = "eats-mate.com:8081"
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const userinfo = useSelector((state) => state.userReducer.userinfo)
  const isPc = useMediaQuery({ query: "(min-width:481px)" });
  const isMobile = useMediaQuery({ query: "(max-width:480px)" });

  const [renderFlag, setRenderFlag] = useState(false); // 렌더링 할지 말지
  const [tabNum, setTabNum] = useState(0); // 0:코스 1:리뷰 2:찜

  const [courseList, setCourseList] = useState([]); // 코스 데이터 리스트
  const [currentCoursePage, setCurrentCoursePage] = useState(1); // 현재 코스 pagination
  const [totalCoursePage, setTotalCoursePage] = useState(1); // 전체 코스 pagination

  const [likeList, setLikeList] = useState([]); // 전체 찜 데이터 리스트
  const [filteredLikeList, setFilteredLikeList] = useState([]); // 필터링된 찜 데이터 리스트
  const [dropdownList, setDropdownList] = useState(["전체", "일식", "한식", "중식", "양식", "아시안", "기타"])

  const [reviewList, setReviewList] = useState([]); // 리뷰 데이터 리스트

  useEffect(() => {
    checkExp();
  }, []);

  // 수정 필요
  // invalid 시 2번 실행, rt 만료 시 실행되는 점이 원치 않는 동작임
  useEffect(() => {
    if(userinfo != null) {
      getUserData();
    }
  }, [userinfo]); // matrix에 오류나는거 넣지 마시오 (ex. userinfo.accessToken)

  async function checkExp() {
    if(userinfo != null) {
      const isTokenExpired = Date.now() >= userinfo.expirationTime - 10000;
      console.log('Date.now(): ', Date.now());
      console.log('exp - 10s: ', userinfo.expirationTime - 10000);
      console.log('isTokenExpired: ', isTokenExpired);

      if (isTokenExpired) {
        // invalid
        console.log("*** ACCESS TOKEN OUTDATED ***")
        try {
          const res = await axios.get("https://" + SERVER + "/user-service/auth/reissue",
            {
              withCredentials: true // Set-Cookie 작동을 위해 필수
            }
          );
          console.log(dispatch(reissueJWT(res.data)))

        } catch(e) {
          console.log(e);
          console.log("*** REFRESH TOKEN OUTDATED ***")
          window.alert("로그인이 필요합니다.");  
          await logOut(); // rt outdated
          navigate("/") // previous page
        }
      }
      else {
        // valid
        console.log("*** VALID USERINFO ***")
        getUserData();
      }
    }
    else {
      // not logged in
      console.log("*** NOT LOGGED IN ***")
      window.alert("로그인이 필요합니다.");
      await logOut(); // rt outdated
      navigate(-1) // previous page
    }
  }

  async function getUserData() {
    try {
      // getUser... 함수에서 던지는 error 여부를 판단한 후에 render flag를 설정해야 함
      getUserCourse()
      getUserLike()
      getUserReview()
      setRenderFlag(true) // 지금은 일단 처리 없이 해놓음
    } catch(e) {
      console.log(e)

      // clear outdated userinfo
      if (userinfo != null) {
        logOut();
      }

      window.alert("사용자 정보를 받아오는데 실패했습니다.");
      navigate(-1) // previous page
    }
  }

  async function logOut() {
    // logout
    try {
      const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
          {
              withCredentials: true // Set-Cookie 작동을 위해 필수
          }
      );
    } catch(e) {
        console.warn(e);
    }
    dispatch(changeUserInfo(null))
  }

  function handleCategoryClick(id) {
    switch (id) {
      case 0: setTabNum(0); break;
      case 1: setTabNum(1); break;
      case 2: setTabNum(2); break;
    }
  }

  function updatePage(delta) {
    if(currentCoursePage + delta > 0 && currentCoursePage + delta <= totalCoursePage) {
      setCurrentCoursePage(currentCoursePage + delta)
    }
  }

  async function runTest() {
    try{
      const res = await axios.post("https://" + SERVER + "/user-service/user/course/",
        {
          title: "test title",
          placeNameList: [ "성수완당", "sdfg", "dgfh" ], /* temp */
          placeAddressList: [ "addr111111", "addr2222222", "addr333333" ],
          distanceList: [ 1234, 235 ],
        },
        { //header
            headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
        }
      );
    } catch(e) {
      console.log(e)  
    }
  }

  async function getUserCourse() {
    try{
      const res = await axios.get("https://" + SERVER + "/user-service/user/course/all",
        { //header
            headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
        }
      );
      console.log(res.data);
      setCourseList(res.data); // async -> DO NOT USE courseList
      const pages = Math.ceil(res.data.length / 2);
      if (pages > 1) {
        setTotalCoursePage(pages);
      }
    } catch(e) {
      throw e;
    }
  }

  async function getUserLike() {
    try {
      const res = await axios.get("https://" + SERVER + "/user-service/user/like/all",
        { //header
            headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
        }
      );
      setLikeList(res.data);
      setFilteredLikeList(res.data);
    } catch(e){
      throw e;
    }
  }

  async function deleteCourse(id) {
    if (window.confirm('정말 삭제하시겠어요?')) {
      
      try {
        const res = await axios.delete("https://" + SERVER + "/user-service/user/course/" + id,
          { //header
              headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
          }
        );
        
        const newCourseList = courseList.filter(course => course.courseId !== id);
        setCourseList(newCourseList);
        const pages = Math.ceil(newCourseList.length / 2);

        if (pages > 0) {
          setTotalCoursePage(pages);

          // DO NOT USE totalCoursePage since it's async (use pages instead)
          if (currentCoursePage > pages) {
            setCurrentCoursePage(pages);
          }
        }

      } catch(e){
        alert("오류가 발생했습니다.")
        throw e;
      }

    }
  }

  function filterLike(gubun) {
    if (gubun == "전체") {
      setFilteredLikeList(likeList)
    }
    else {
      const filteredList = likeList.filter(like => like.gubun == gubun);
      setFilteredLikeList(filteredList);
    }
  }

  async function deleteLike(id) {
    if (window.confirm('정말 삭제하시겠어요?')) {
      try {
        const res = await axios.delete("https://" + SERVER + "/review-service/review/" + id,
          { //header
              headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
          }
        );
        // 원본에서 삭제
        const newLikeList = likeList.filter(like => like.id !== id);
        setLikeList(newLikeList);

        // 필터에서 삭제
        const newFilteredList = filteredLikeList.filter(like => like.id !== id);
        setFilteredLikeList(newFilteredList);

      } catch(e){
        alert("오류가 발생했습니다.")
        throw e;
      }
    }
  }

  async function deleteReview(id) {
    if (window.confirm('정말 삭제하시겠어요?')) {
      try {
        const res = await axios.delete("https://" + SERVER + "/review-service/review/" + id,
          { //header
              headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
          }
        );
        const newReviewList = reviewList.filter(review => review.id !== id);
        setReviewList(newReviewList);
      } catch(e){
        alert("오류가 발생했습니다.")
        throw e;
      }
    }
  }

  async function getUserReview() {
    try {
      const res = await axios.get("https://" + SERVER + "/review-service/review/user",
        { //header
            headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
        }
      );
      const newData = res.data;
      newData.forEach((e, i) => res.data[i].createdBy = e.createdBy.replaceAll("-", ". "));
      setReviewList(newData);
    } catch(e){
      throw e;
    }
  }

  return (
    <>
    { userinfo != null && renderFlag ?
      <>
        {isPc && <NavBar />}
        {isMobile && <MobileNavBar />}
        {isMobile && <NoContent/>}
        {isPc &&
        <Container fluid="xxl" style={{ width: "75%", height: "100%", padding: "50px 0px 100px 0px"}}>
          {/* 상단 타이틀 */}
          {isPc &&
          <div>
          <div className={styles.title}>
            <div className={styles.profileContainer}>
              <Image
                  src={userinfo.profileImageUrl}
                  roundedCircle
                  className={styles.profileImage}
              />
              <div className={styles.userName}>{userinfo.name}</div>
              <div className={styles.userEmailContainer}>
                <KakaoCircleSvg />
                <div className={styles.userEmail}>{userinfo.email}</div>
              </div>
            </div>
            <div className={styles.welcomeContainer}>
              <div className={styles.welcomeText}>
                {<p>안녕하세요 <b7>{userinfo.name}</b7> 메이트님!<br/>오늘도 잇츠메이트와 맛있는 식사하세요 🍴</p>}
              </div>
              <div className={styles.category}>
                <div> {/* flexbox */}
                  <div onClick={() => handleCategoryClick(0)}><p>혼행 코스</p><b7>{courseList.length}</b7></div>
                  <div className={styles.separator} />
                  <div onClick={() => handleCategoryClick(1)}><p>내가 작성한 후기</p><b7>{reviewList.length}</b7></div>
                  <div className={styles.separator} />
                  <div onClick={() => handleCategoryClick(2)}><p>찜한 장소</p><b7>{likeList.length}</b7></div>
                </div>
              </div>
            </div>
          </div>

          {/* 혼행 코스 */}
          {tabNum == 0 ?
          <div>
            <div className={styles.subTitle}>
              <div className={styles.titleText}><b7>{userinfo.name}</b7> 메이트님의 혼행 코스🍚</div>
              <div className={styles.pagination}><hl>{currentCoursePage}</hl> / {totalCoursePage}</div>
              <div className={styles.arrowContainer}>
                <div className={styles.leftArrow} onClick={() => updatePage(-1)}>
                  <svg width="31" height="14" viewBox="0 0 31 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M31 13H3L14.0303 1" stroke={currentCoursePage > 1 ? "#000000" : "#D2D2D2"} strokeWidth="2"/>
                  </svg>
                </div>

                <div className={styles.rightArrow} onClick={() => updatePage(1)}>
                  <svg width="31" height="14" viewBox="0 0 31 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M0 13H28L16.9697 1" stroke={currentCoursePage >= totalCoursePage ? "#D2D2D2" : "#000000"} strokeWidth="2"/>
                  </svg>
                </div>
              </div>
            </div>

            <div className={styles.courseList}>
              {0 < courseList.length ?
              <Course
                course={courseList[currentCoursePage*2-2]}
                deleteCourse={deleteCourse}
              />
              : null
              }
              {currentCoursePage*2-1 < courseList.length ?
              (
                0 < courseList.length ?
                <Course
                  course={courseList[currentCoursePage*2-1]}
                  deleteCourse={deleteCourse}
                />
                : null
              )
              :
              <div
                className="empty-course-container"
                style={{ width: "526px", margin: "32px auto auto auto" }}
              />
              }
            </div>
          </div>
          : null
          }

          {/* 리뷰 */}
          {tabNum == 1 ?
          <div>
            <div className={styles.subTitle}>
              <div className={styles.titleText}><b7>내가 작성한 후기</b7></div>
            </div>
            <div className={styles.reviewList}>
              {reviewList.map((o, i) =>
              <Review
                review={o}
                deleteReview={deleteReview}
                mypageMode={true}
              />
              )}
            </div>
          </div>
          : null
          }

          {/* 찜 */}
          {tabNum == 2 ?
          <div>
            <div className={styles.subTitle}>
              <div className={styles.titleText}><b7>찜한 장소</b7></div>
              <Dropdown
                category={dropdownList}
                selectHandler={filterLike}
              />
            </div>
            <div className={styles.likeList}>
              {filteredLikeList.map((o, i) =>
              <Like
                like={o}
                deleteLike={deleteLike}
              />
              )}
            </div>
          </div>
          : null
          }
        
          {/*
          <div>
            <button onClick={runTest}>save</button>
            <button onClick={getUserCourse}>getAll</button>
          </div>
          */}

          
        </div>}
        </Container>
        }
      </>
      : null
    }
    </>
  );
}

export default MyPage;
import React, { useEffect, useState } from "react";
import styles from "./ReviewPage.module.css";
import { useLocation } from "react-router";
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Review from "../components/mypage/Review";
import { Container } from "react-bootstrap";
import NavBar from "../components/navigation/NavBar";
import Carousel from "../components/etc/Carousel";
import Dropdown from "../components/etc/Dropdown";
import ReviewCounter from "../components/review/ReviewCounter";
import ReviewModal from "../components/review/ReviewModal";
import { useDispatch, useSelector } from "react-redux";
import { changeUserInfo, reissueJWT } from '../_actions/user_action';
import { useMediaQuery } from "react-responsive"
import MobileNavBar from "../components/navigation/mobile/MobileNavBar";
import NoContent from '../components/etc/mobile/NoContent';

function ReviewPage() {
  const SERVER = "eats-mate.com:8081"
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const placeName = useLocation().pathname.split("/").pop();
  const userinfo = useSelector((state) => state.userReducer.userinfo)
  const isPc = useMediaQuery({ query: "(min-width:481px)" });
  const isMobile = useMediaQuery({ query: "(max-width:480px)" });

  const [reviewList, setReviewList] = useState([]); // 최초로 받아온 리뷰 리스트 (수정 x)
  const [dynReviewList, setDynReviewList] = useState([]); // 화면에 보여줄, 변동 가능한 리뷰 리스트 (수정 o)
  const [information, setInformation] = useState({}); // 가게 정보
  const [rateList, setRateList] = useState([]);
  const [dropdownList, setDropdownList] = useState(["최신순", "인기순"]);
  const [imgData, setImgData] = useState([]);

  const [modalOpen, setModalOpen] = useState(false);

  useEffect(() => {
    getInformation();
    getUserReview();
    getReviewRate();
  }, []);

  async function getInformation() {
    try {
      const res = await axios.get("https://" + SERVER + "/map-service/findByName/?name=" + placeName);
      setInformation(res.data)
    } catch(e){
      throw e;
    }
  }

  async function getUserReview() {
    try {
      const res = await axios.get("https://" + SERVER + "/review-service/review/?place_name=" + placeName + "&amount=" + 0,
      );
      res.data.forEach((e, i) => res.data[i].createdBy = e.createdBy.replaceAll("-", ". "));
      setReviewList(res.data);
      setDynReviewList(res.data);
      getCarouselImage(res.data);
    } catch(e){
      throw e;
    }
  }

  async function setUserReviewByRecommend() { // 추천순 정렬
    try {
      const res = await axios.get("https://" + SERVER + "/review-service/review/?place_name=" + placeName + "&amount=" + 0 + "&recommend=" + true,
      );
      res.data.forEach((e, i) => res.data[i].createdBy = e.createdBy.replaceAll("-", ". "));
      setDynReviewList(res.data);
    } catch(e){
      throw e;
    }
  }

  async function getReviewRate() {
    try {
      const res = await axios.get("https://" + SERVER + "/review-service/review/count?place_name=" + placeName);
      setRateList(res.data);
    } catch(e){
      throw e;
    }
  }

  function getCarouselImage(reviewData) {
    let slideList = []
    reviewData.map((review) => {
      console.log(review.images)
      if (review.images[0] != "") {
        for (const imageLink of review.images) {
          const slide = {}
          slide['image'] = imageLink;
          slide['link'] = imageLink;
          slideList = [...slideList, slide];
        }
      }
    })
    setImgData(slideList)
    console.log(slideList)
  }

  function sortReview(selection) {
    if (selection == "최신순") {
      setDynReviewList(reviewList);
    }
    else {
      setUserReviewByRecommend();
    }
  }

  const showModal = () => {
    setModalOpen(true);
}
const closeModal = () => {
    setModalOpen(false);
}

async function checkExp() {
  if(userinfo != null) {
    const isTokenExpired = Date.now() >= userinfo.expirationTime - 10000;
    console.log('Date.now(): ', Date.now());
    console.log('exp - 10s: ', userinfo.expirationTime - 10000);
    console.log('isTokenExpired: ', isTokenExpired);

    if (isTokenExpired) {
      // invalid
      console.log("*** ACCESS TOKEN OUTDATED ***")
      try {
        const res = await axios.get("https://" + SERVER + "/user-service/auth/reissue",
          {
            withCredentials: true // Set-Cookie 작동을 위해 필수
          }
        );
        console.log(dispatch(reissueJWT(res.data)))
        showModal();

      } catch(e) {
        console.log(e);
        console.log("*** REFRESH TOKEN OUTDATED ***")
        window.alert("로그인이 필요합니다.");  
        await logOut(); // rt outdated
      }
    }
    else {
      // valid
      console.log("*** VALID USERINFO ***")
      showModal();
    }
  }
  else {
    // not logged in
    console.log("*** NOT LOGGED IN ***")
    window.alert("로그인이 필요합니다.");
    await logOut(); // rt outdated
  }
}

async function logOut() {
  // logout
  try {
    const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
      {
          withCredentials: true // Set-Cookie 작동을 위해 필수
      }
    );
  } catch(e) {
      console.warn(e);
  }
  dispatch(changeUserInfo(null))
}

  return (
    <>
      {isPc && <NavBar />}
      {isMobile && <MobileNavBar/>}
      {isMobile && <NoContent/>}
      {isPc && 
      <Container fluid="xxl" style={{ width: "75%", height: "100%", padding: "50px 0px 100px 0px"}}>

        <div style={{display: "flex", flexDirection: "column"}}>
          <div className={styles.backButton} onClick={() => {navigate("/detail/" + placeName);}}>
            <svg width="166" height="16" viewBox="0 0 166 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M27.128 1.472V2.88C27.128 5.008 25.896 6.976 23.592 7.792L24.472 9.12C27.064 8.16 28.504 5.744 28.504 2.88V1.472H27.128ZM27.448 1.472V3.024C27.448 5.616 28.888 7.824 31.368 8.704L32.248 7.392C30.056 6.672 28.808 4.912 28.808 3.024V1.472H27.448ZM33.464 0.704V9.472H35.144V0.704H33.464ZM34.68 4.304V5.696H37.208V4.304H34.68ZM30.44 9.84C27.416 9.84 25.56 10.848 25.56 12.576C25.56 14.304 27.416 15.312 30.44 15.312C33.448 15.312 35.304 14.304 35.304 12.576C35.304 10.848 33.448 9.84 30.44 9.84ZM30.44 11.152C32.472 11.152 33.64 11.648 33.64 12.576C33.64 13.504 32.472 14 30.44 14C28.408 14 27.224 13.504 27.224 12.576C27.224 11.648 28.408 11.152 30.44 11.152ZM43.5588 5.792V7.168H46.1988V5.792H43.5588ZM40.6627 2.032V4.672C40.6627 7.168 39.6547 9.776 37.5907 11.024L38.6147 12.288C40.8387 10.928 41.9587 7.84 41.9587 4.672V2.032H40.6627ZM41.0147 2.032V4.608C41.0147 7.584 41.9907 10.608 44.1828 11.968L45.1267 10.656C43.1747 9.424 42.2787 6.96 42.2787 4.608V2.032H41.0147ZM48.6947 0.704V15.328H50.2948V0.704H48.6947ZM45.7188 0.976V14.624H47.2867V0.976H45.7188ZM62.8535 0.704V15.328H64.4535V0.704H62.8535ZM58.2775 6.16V7.632H60.4855V6.16H58.2775ZM59.9895 1.024V14.592H61.5735V1.024H59.9895ZM52.0055 2.464V3.824H58.6775V2.464H52.0055ZM51.9255 11.856C53.7655 11.856 56.7735 11.792 59.0615 11.328L58.9495 10.112C56.7255 10.416 53.6055 10.464 51.7335 10.464L51.9255 11.856ZM53.0775 3.328V10.848H54.5975V3.328H53.0775ZM56.0695 3.328V10.848H57.5895V3.328H56.0695ZM76.3243 0.688V15.344H78.0043V0.688H76.3243ZM70.2123 1.776C68.0363 1.776 66.4523 3.776 66.4523 6.928C66.4523 10.08 68.0363 12.096 70.2123 12.096C72.4043 12.096 73.9883 10.08 73.9883 6.928C73.9883 3.776 72.4043 1.776 70.2123 1.776ZM70.2123 3.296C71.4923 3.296 72.3723 4.656 72.3723 6.928C72.3723 9.216 71.4923 10.592 70.2123 10.592C68.9323 10.592 68.0523 9.216 68.0523 6.928C68.0523 4.656 68.9323 3.296 70.2123 3.296ZM83.763 2.896V4.944C83.763 7.44 82.243 10.176 79.987 11.216L80.947 12.544C83.459 11.344 85.107 8.16 85.107 4.944V2.896H83.763ZM84.115 2.896V4.944C84.115 8.08 85.763 11.04 88.307 12.176L89.235 10.848C86.947 9.888 85.443 7.36 85.443 4.944V2.896H84.115ZM80.515 2.16V3.552H88.691V2.16H80.515ZM90.403 0.704V15.328H92.083V0.704H90.403ZM94.1298 12.24V13.616H107.378V12.24H94.1298ZM99.8898 9.264V12.8H101.554V9.264H99.8898ZM95.6818 1.728V3.072H104.13V5.024H95.7138V9.072H97.3778V6.352H105.794V1.728H95.6818ZM95.7138 8.384V9.744H106.13V8.384H95.7138ZM116.922 4.992V7.696H118.586V4.992H116.922ZM112.858 4.352V5.68H122.81V4.352H112.858ZM112.858 1.232V5.072H114.522V2.576H122.666V1.232H112.858ZM111.146 6.864V8.192H124.362V6.864H111.146ZM112.714 9.216V10.48H121.066V11.536H112.73V14.272H114.394V12.72H122.714V9.216H112.714ZM112.73 13.904V15.184H123.13V13.904H112.73ZM129.129 1.776C126.953 1.776 125.385 3.776 125.385 6.928C125.385 10.08 126.953 12.096 129.129 12.096C131.305 12.096 132.873 10.08 132.873 6.928C132.873 3.776 131.305 1.776 129.129 1.776ZM129.129 3.296C130.393 3.296 131.273 4.656 131.273 6.928C131.273 9.216 130.393 10.592 129.129 10.592C127.865 10.592 126.985 9.216 126.985 6.928C126.985 4.656 127.865 3.296 129.129 3.296ZM134.889 0.704V15.328H136.569V0.704H134.889ZM136.185 6.4V7.792H138.841V6.4H136.185ZM148.968 0.688V15.312H150.648V0.688H148.968ZM150.2 6.48V7.856H152.84V6.48H150.2ZM145.176 2.24V2.528C145.176 6.432 143.24 9.36 139.288 11.376L140.232 12.656C145.016 10.256 146.824 6.496 146.824 2.24H145.176ZM140.024 2.24V3.6H146.04V2.24H140.024ZM163.783 0.704V15.328H165.463V0.704H163.783ZM159.495 2.256V2.544C159.495 6.448 157.719 9.344 153.511 11.376L154.391 12.72C159.415 10.272 161.143 6.592 161.143 2.256H159.495ZM154.231 2.256V3.6H160.247V2.256H154.231Z" fill="black"/>
            <path d="M8 1L2 7L8 13" stroke="black" stroke-width="1.5"/>
            </svg>
          </div>

          <div className={styles.category}>{information.gubun}</div>
          <div className={styles.name}>{information.name}</div>

          <div className={styles.subTitle}>
            <div className={styles.titleText}>총 {reviewList.length}건의 리뷰가 있어요</div>
            <Dropdown
              category={dropdownList}
              selectHandler={sortReview}
            />
          </div>

          <div className={styles.forresponsive}>
            <div className={styles.counterBox}>
                <ReviewCounter
                  rateVal={rateList}
                />
            </div>
            <div style={{margin: "0px 20px", overflow: "visible"}}>
              <div style={{width: "460px"}}>
                <Carousel
                  dataList={imgData}
                  outerViewWidth={"400px"}
                  outerViewHeight={"150px"}
                  imageWidth={"150px"}
                  imageHeight={"150px"}
                  imageRadius={2}
                  gap={16}
                  innerViewOverflow={"hidden"}
                  buttonSize={48}
                  scrollStep={"one"}
                  autoScroll={true}
                  showBullets={false}
                />
              </div>
            </div>

            <div style={{display: "flex", flexDirection: "column"}}>
              <div className={styles.reviewReqTextContainer}>
                  <div style={{marginRight: "10px"}}>📢</div>
                  <div>{information.name}에서 혼밥해본 적이 있다면 직접 리뷰를 남겨보세요</div>
              </div>
              <div className={styles.reviewButton} onClick={checkExp}>
                  <div>리뷰쓰러 가기</div>
                  <svg width="34" height="10" viewBox="0 0 34 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M1 9H31L23.1311 1" stroke="white" stroke-width="2" stroke-linecap="round"/>
                  </svg>
              </div>
            </div>
          </div>
          
          { modalOpen ? <ReviewModal information={information} closeModal={closeModal}/> : null }

        </div>

        {dynReviewList.map((o, i) =>
          <Review
            review={o}
            mypageMode={false}
          />
        )}
      </Container>
      }
    </>
  );
}

export default ReviewPage;
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from 'react-redux'
import styles from "./LikeButton.module.css";
import axios from 'axios';
import { changeUserInfo, reissueJWT } from '../../_actions/user_action';

function LikeButton(props) {
    const SERVER = "eats-mate.com:8081"
    const userinfo = useSelector((state) => state.userReducer.userinfo)
    const [clicked, setClicked] = useState(false);
    const dispatch = useDispatch();

    useEffect(() => {
        if (props.placeId != undefined) {
            getLikeClicked();
        }
    })

    async function handleLike() {
        try {
            if (clicked) {
                const res = await axios.delete("https://" + SERVER + "/user-service/user/like/" + props.placeId,
                    { //header
                        headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
                    }
                );
            }
            else {
                const res = await axios.put("https://" + SERVER + "/user-service/user/like/" + props.placeId,
                    null, // parameter
                    { //header
                        headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
                    }
                );
            }
            setClicked(!clicked)
        } catch(e) {
            console.warn(e);
            window.alert("오류가 발생했습니다. 다시 시도해주세요.");
        }
    }

    async function getLikeClicked() {
        try {
            const res = await axios.get("https://" + SERVER + "/user-service/user/like/" + props.placeId,
                { //header
                    headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
                }
            );
            if (res.data) setClicked(true)
        } catch(e) {
            console.warn(e);
        }
    }

    async function checkExp() {
        if(userinfo != null) {
            const isTokenExpired = Date.now() >= userinfo.expirationTime - 10000;
            console.log('Date.now(): ', Date.now());
            console.log('exp - 10s: ', userinfo.expirationTime - 10000);
            console.log('isTokenExpired: ', isTokenExpired);
        
            if (isTokenExpired) {
                // invalid
                console.log("*** ACCESS TOKEN OUTDATED ***")
                try {
                    const res = await axios.get("https://" + SERVER + "/user-service/auth/reissue",
                    {
                        withCredentials: true // Set-Cookie 작동을 위해 필수
                    }
                    );
                    console.log(dispatch(reissueJWT(res.data)))
                    handleLike();
            
                } catch(e) {
                    console.log(e);
                    console.log("*** REFRESH TOKEN OUTDATED ***")
                    window.alert("로그인이 필요합니다.");  
                    await logOut(); // rt outdated
                }
            }
            else {
                // valid
                console.log("*** VALID USERINFO ***")
                handleLike();
            }
        }
        else {
            // not logged in
            console.log("*** NOT LOGGED IN ***")
            window.alert("로그인이 필요합니다.");
            await logOut(); // rt outdated
        }
    }
        
    async function logOut() {
    // logout
    try {
        const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
            {
                withCredentials: true // Set-Cookie 작동을 위해 필수
            }
        );
    } catch(e) {
        console.warn(e);
    }
        dispatch(changeUserInfo(null))
    }

    return (
        <div className={clicked ? styles.likeButtonClicked : styles.likeButton} onClick={checkExp}>
            <svg width="22" height="21" viewBox="0 0 22 21" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.9999 3.77857L10.014 2.76519C7.69986 0.386442 3.45661 1.20732 1.92486 4.19794C1.20573 5.60457 1.04348 7.63544 2.35661 10.2273C3.62161 12.7229 6.25336 15.7122 10.9999 18.9682C15.7464 15.7122 18.3767 12.7229 19.6431 10.2273C20.9562 7.63407 20.7954 5.60457 20.0749 4.19794C18.5431 1.20732 14.2999 0.385067 11.9857 2.76382L10.9999 3.77857ZM10.9999 20.6251C-10.083 6.69357 4.50848 -4.17993 10.7579 1.57169C10.8404 1.64732 10.9215 1.72569 10.9999 1.80682C11.0774 1.72577 11.1582 1.64779 11.2419 1.57307C17.4899 -4.18268 32.0827 6.69219 10.9999 20.6251Z" fill="current"/>
            </svg>
        </div>
    );
}

export default LikeButton;import React from "react";
import styles from "./MainSearchButton.module.css"
import 'bootstrap/dist/css/bootstrap.min.css';

function MainSearchButton() {

    return (
        <>
        </>
    );
}

export default MainSearchButton;import React, { useEffect, useState, useRef } from 'react';
import styles from "./Carousel.module.css";
import { ReactComponent as LeftBtnSvg } from "../../images/svg/carousel-left-button.svg"
import { ReactComponent as RightBtnSvg } from "../../images/svg/carousel-right-button.svg"

function Carousel(props) {
    const [slideState, setSlideState] = useState(0);
    const [timeoutId, setTimeoutId] = useState();
    
    const SLIDES_NUM = props.dataList.length - 1;

    const slideShowRef = useRef(null);
    const slideRef = useRef(null);
    const outerViewRef = useRef(null);
    const innerViewRef = useRef(null);
    const imageRef = [];
    const buttonRef = [];

    function imgClick(idx) {
        // not using useNavigate was intended
        // window.location = props.dataList[idx].link;
        window.open(props.dataList[idx].link, '_blank');
    } // img click event function

    function leftBtnClick() {
        clearTimeout(timeoutId);
        if(slideState === 0) {
            setSlideState(SLIDES_NUM);
         } else {
            setSlideState(slideState - 1);
        }
    } // left button click event function

    function rightBtnClick() {
        clearTimeout(timeoutId);
        if(slideState >= SLIDES_NUM) {
            setSlideState(0)
        } else {
            setSlideState(slideState + 1);
        }
    } // right button click event function

    function pointBtnClick(num) {
        clearTimeout(timeoutId);
        setSlideState(num);
    } // point button click event function

    useEffect(()=> {
        slideRef.current.style.transition = "all 0.8s ease-in-out";
        outerViewRef.current.style.width = props.outerViewWidth;
        outerViewRef.current.style.height = props.outerViewHeight;
        slideRef.current.style.width = props.imageWidth;
        slideRef.current.style.height = props.imageHeight;
        innerViewRef.current.style.overflow = props.innerViewOverflow;
        if (props.innerViewOverflow == "visible") { slideShowRef.current.width = "100%"; }
        slideRef.current.style.gap = `${props.gap}px`;

        imageRef.forEach((ref, index) => {
            ref.style.borderRadius = `${props.imageRadius}px`
            ref.style.minWidth = props.imageWidth;
            // ref.style.minHeight = props.imageHeight; // 이거 적용하면 왜 min-width 무시됨..?
        });
        buttonRef[0].style.transform = `translateX(-${props.buttonSize/2}px)`
        buttonRef[1].style.transform = `translateX(${props.buttonSize/2}px)`
        if(props.buttonColor != undefined) {
            buttonRef[0].firstElementChild.lastElementChild.style.stroke = props.buttonColor
            buttonRef[1].firstElementChild.lastElementChild.style.stroke = props.buttonColor
        }
    },[]);

    useEffect(()=> {
        if (props.scrollStep == "full") {
            slideRef.current.style.transform = `translateX(-${slideState}00%) translateX(-${slideState * props.gap}px)`;
        }
        else if (props.scrollStep == "one") {
            slideRef.current.style.transform = `translateX(-${slideState * props.imageWidth.replace("px","")}px) translateX(-${slideState * props.gap}px)`;
        }
        if (props.autoScroll) setTimeoutId(setTimeout(() => rightBtnClick(), 4500));
    }, [slideState]);

    return (
        <div className={styles.slideShow} ref={slideShowRef}>

            <div className={styles.slideBtnContainer} ref={outerViewRef}>
                <div className={styles.leftBtn} onClick={() => leftBtnClick()} ref={ref => buttonRef[0] = ref}>
                    <LeftBtnSvg width={`${props.buttonSize}px`} height={`${props.buttonSize}px`} />
                </div>
                <div className={styles.rightBtn} onClick={() => rightBtnClick()} ref={ref => buttonRef[1] = ref}>
                    <RightBtnSvg width={`${props.buttonSize}px`} height={`${props.buttonSize}px`} />
                </div>

                <div className={styles.slideContainer} ref={innerViewRef}>
                    <div className={styles.slides} ref={slideRef}>
                        {props.dataList.map((data, index) => {
                            return <img className={styles.image} key={index} alt="slide img" onClick={() => imgClick(index)} src={data.image} ref={ref => imageRef[index] = ref} />
                        })}
                    </div>
                </div>
            </div>

            {props.showBullets ?
            <div className={styles.bullets}>
                {props.dataList.map((image, index) => {
                    return <div className={slideState == index ? styles.checked : styles.unchecked} onClick={() => pointBtnClick(index)} />
                })}
            </div>
            : null }
        </div>
    );
}

export default Carousel;import React, { useState, useEffect, useRef } from "react";
import styles from "./Dropdown.module.css"

function Dropdown(props) {

    const [currentCategory, setCurrentCategory] = useState(props.category[0])
    const [clicked, setClicked] = useState(false);
    const dropdownRef = useRef();

    function optionClickHandler(idx) {
        const category = props.category[idx]
        setCurrentCategory(category)
        props.selectHandler(category)
    }

    function onClickOutside(ref) {
        useEffect(() => {
            /**
             * Alert if clicked on outside of element
             */
            function handleClickOutside(event) {
                if (ref.current && !ref.current.contains(event.target)) {
                    setClicked(false)
                }
            }
            // Bind the event listener
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
                // Unbind the event listener on clean up
                document.removeEventListener("mousedown", handleClickOutside);
            };
        }, [ref]);
    }
    onClickOutside(dropdownRef);

    return (
        <div className={styles.container} onClick={() => setClicked(!clicked)} ref={dropdownRef}>
            <div className={styles.selection}>
                <div>{currentCategory}</div>
                <div className={styles.arrow}>
                    {clicked ?
                    <svg width="18" height="7" viewBox="0 0 18 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M17 6L9 1L1 6" stroke="#8C8C8C"/>
                    </svg>
                    :
                    <svg width="18" height="7" viewBox="0 0 18 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 1L9 6L17 1" stroke="#8C8C8C"/>
                    </svg>
                    }
                </div>
            </div>
            {clicked ?
            <div className={styles.option}>
                {props.category.map((o, i) =>
                    <div onClick={() => optionClickHandler(i)}>{o}</div>
                )}
            </div>
            : null
            }
        </div>
    );
}

export default Dropdown;import { useState } from 'react';

// not working in tour info card
const useCopyClipBoard = () => {
    const [isCopy, setIsCopy] = useState(false);
    const onCopy = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
            setIsCopy(true);
            return true;
        } catch (error) {
            console.error(error);
            setIsCopy(false);
            return false;
        }
    };
    return [isCopy, onCopy];
};

export default useCopyClipBoard;
import React, { useState } from "react";
import { useNavigate } from 'react-router';
import styles from "./RecommendedList.module.css";

const today = new Date();
const month = today.getMonth() + 1;
const date = today.getDate();
const hours = today.getHours(); // const minutes = today.getMinutes();
const time = month + "월 " + date + "일 " + hours + ":" + "00시 기준";

const address = "주소 변수";
const name = "식당명 변수";
const gubun = "카테고리 변수";

function RecommendedList() {

    const [storeInfo, setStoreInfo] = useState({first_store:"앙카라피크닉", second_store:"한끼마끼", third_store:"송화산시도삭면 본점"});
    const navigate = useNavigate();

    return (
        <>
        <div className={styles.parent}>
            <div className={styles.child}>
            <span className={styles.timeformedia}>{time}</span>
                <div className={styles.maininfomessage}>인기있는 맛집을 알려드려요</div>
                    <div className={styles.wrap}>
                        <div className={styles.element_list}>
                            <div className={styles.element}
                                onClick={() => {
                                    navigate('/detail/' + storeInfo.first_store);
                            }}>
                                <img className={styles.recommendimage} alt="recommended list img1" src="/img/recommendImg1.png" />
                                <div className={styles.recommendContent}>
                                    <div className={styles.title}>
                                        <img className={styles.locationimage} alt="location img" src="/img/location_color.png" />
                                        <div className={styles.address}>용산구</div>
                                    </div>
                                    <div className={styles.name}>{storeInfo.first_store}<span> 기타</span></div>
                                    <div className={styles.ment}>오늘 20명이 <span>찜</span>했어요</div>
                                </div>
                            </div>
                            <div className={styles.element}
                                onClick={() => {
                                    navigate('/detail/' + storeInfo.second_store);
                            }}>
                                <img className={styles.recommendimage} alt="recommended list img2" src="/img/recommendImg2.png" />
                                <div className={styles.recommendContent}>
                                    <div className={styles.title}>
                                        <img className={styles.locationimage} alt="location img" src="/img/location_color.png" />
                                        <div className={styles.address}>서대문구</div>
                                    </div>
                                    <div className={styles.name}>한끼마끼<span> 일식</span></div>
                                    <div className={styles.ment}>오늘 5명이 <span>리뷰</span>를 남겼어요</div>
                                </div>
                            </div>
                            <div className={styles.element}
                                onClick={() => {
                                    navigate('/detail/' + storeInfo.third_store);
                            }}>
                                <img className={styles.recommendimage} alt="recommended list img3" src="/img/recommendImg3.png" />
                                <div className={styles.recommendContent}>
                                    <div className={styles.title}>
                                        <img className={styles.locationimage} alt="location img" src="/img/location_color.png" />
                                        <div className={styles.address}>광진구</div>
                                    </div>
                                    <div className={styles.name}>송화산시도삭면<span> 일식</span></div>
                                    <div className={styles.ment}>오늘 <span>조회수</span>가 가장 많아요</div>
                                </div>
                            </div>
                        </div>
                </div>
            </div>
        </div>
            </>
    );

}

export default RecommendedList;
import React from "react";
import axios from 'axios';
import styles from "./Like.module.css"
import { useSelector } from 'react-redux';
import { useNavigate } from "react-router-dom";

function Like(props) {
    const SERVER = "eats-mate.com:8081"
    const userinfo = useSelector((state) => state.userReducer.userinfo)
    const navigate = useNavigate();

    async function requestDelete() {
        try {
            const res = await axios.delete("https://" + SERVER + "/user-service/user/like/" + props.like.id,
                { //header
                    headers: { 'Authorization': `Bearer ${userinfo.accessToken}` }
                }
            );
            props.deleteLike(props.like.id);
        } catch(e) {
            console.warn(e);
        }
    }

    function gotoDetailPage() {
        navigate("/detail/" + props.like.name);
    }

    return (
        <div className={styles.container}>
            <div className={styles.icon}>
                <svg width="22" height="21" viewBox="0 0 22 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18.5 13.5L12 19L11 20L6 16L2 11L0.5 6.5L2 2.5L5 1H8L11.5 2.5L13.5 1H17L21 3.5V8.5L18.5 13.5Z" fill="#E97869"/>
                <path d="M10.9999 3.77851L10.014 2.76513C7.69986 0.386381 3.45661 1.20726 1.92486 4.19788C1.20573 5.60451 1.04348 7.63538 2.35661 10.2273C3.62161 12.7229 6.25336 15.7121 10.9999 18.9681C15.7464 15.7121 18.3767 12.7229 19.6431 10.2273C20.9562 7.63401 20.7954 5.60451 20.0749 4.19788C18.5431 1.20726 14.2999 0.385006 11.9857 2.76376L10.9999 3.77851ZM10.9999 20.625C-10.083 6.69351 4.50848 -4.17999 10.7579 1.57163C10.8404 1.64726 10.9215 1.72563 10.9999 1.80676C11.0774 1.7257 11.1582 1.64773 11.2419 1.57301C17.4899 -4.18274 32.0827 6.69213 10.9999 20.625Z" fill="#E97869"/>
                </svg>
            </div>
            <div className={styles.likeInfo}>
                <div className={styles.title}>
                    <div className={styles.name} onClick={gotoDetailPage}>{props.like.name}</div>
                    <div className={styles.gubun}>{props.like.gubun}</div>
                </div>
                <div className={styles.address}>{props.like.address}</div>
            </div>
            <div className={styles.deleteBtn} onClick={requestDelete}>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="11.5" fill="#FAFAFA" stroke="#B0B0B0"/>
                <path d="M16.2853 7.71423L7.71387 16.2857" stroke="#B0B0B0"/>
                <path d="M16.2852 16.2855L7.71373 7.71411" stroke="#B0B0B0"/>
                </svg>
            </div>
        </div>
    );
}

export default Like;import React from "react";
import { useState, useEffect, useRef } from "react";
import styles from "./Course.module.css"

function Course(props) {
    const [toggleMenu, setTogglemenu] = useState(false);
    const menuRef = useRef();

    function convertDistance(distance) {
        if (distance < 1000) return distance + "m"
        else {
            return (distance / 1000).toFixed(1) + "km"
        }
    }

    function openMenu() {
        setTogglemenu(true);
    }

    function onClickOutside(ref) {
        useEffect(() => {
            /**
             * Alert if clicked on outside of element
             */
            function handleClickOutside(event) {
                if (ref.current && !ref.current.contains(event.target)) {
                    setTogglemenu(false)
                }
            }
            // Bind the event listener
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
                // Unbind the event listener on clean up
                document.removeEventListener("mousedown", handleClickOutside);
            };
        }, [ref]);
    }
    onClickOutside(menuRef);

    function deleteHandler() {
        props.deleteCourse(props.course.courseId);
        setTogglemenu(false);
    }

    return (
        <div className={styles.container}>
            <div className={styles.title}>
                {props.course.title}
                <div className={styles.courseMenu} onClick={openMenu}>
                    <svg width="3" height="15" viewBox="0 0 3 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="1.5" cy="7.5" r="1.5" transform="rotate(90 1.5 7.5)" fill="#8C8C8C"/>
                    <circle cx="1.5" cy="13.5" r="1.5" transform="rotate(90 1.5 13.5)" fill="#8C8C8C"/>
                    <circle cx="1.5" cy="1.5" r="1.5" transform="rotate(90 1.5 1.5)" fill="#8C8C8C"/>
                    </svg>
                </div>
            </div>

            <div className={styles.courseInfo}>
                <div className={styles.distanceList}>
                {props.course.distanceList.map((o, i) =>
                        <div className={styles.distance}><p>{convertDistance(o)}</p></div>
                )}
                <div className={styles.distance} /> {/* dummy div */}
                </div>
            
                <div className={styles.placeList}>
                {props.course.placeNameList.map((o, i) =>
                    <div className={styles.place}>
                        <div>
                            <div className={styles.courseNumber}><p>{i+1}</p></div>
                            <div className={styles.courseDash} />
                        </div>
                        <div className={styles.placeData}>
                            <div className={styles.placeName}><p>{o}</p></div>
                            <div className={styles.placeAddress}><p>{props.course.placeAddressList[i]}</p></div>
                        </div>
                    </div>
                )}
                </div>
            </div>

            {toggleMenu ?
            <div className={styles.subMenu} ref={menuRef}>
                <div className={styles.deleteBtn} onClick={deleteHandler}>삭제하기</div>
            </div>
            : null
            }
        </div>
    );
}

export default Course;import React, { useState, useEffect, useRef } from "react";
import styles from "./Review.module.css"
import { useSelector } from 'react-redux';

function Review(props) {
    const userinfo = useSelector((state) => state.userReducer.userinfo)
    const [toggleMenu, setTogglemenu] = useState(false);
    const menuRef = useRef();

    function openMenu() {
        setTogglemenu(true)
    }

    function useOutsideAlerter(ref) {
        useEffect(() => {
            /**
             * Alert if clicked on outside of element
             */
            function handleClickOutside(event) {
                if (ref.current && !ref.current.contains(event.target)) {
                    setTogglemenu(false)
                }
            }
            // Bind the event listener
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
                // Unbind the event listener on clean up
                document.removeEventListener("mousedown", handleClickOutside);
            };
        }, [ref]);
    }
    useOutsideAlerter(menuRef);

    function deleteHandler() {
        props.deleteReview(props.review.id);
        setTogglemenu(false);
    }

    function viewImage(url) {
        window.open(url, '_blank');
    }

    return (
        <div className={props.mappageMode ? styles.containerSmaller : styles.container}>
            <div className={props.mappageMode ? styles.reviewInfoSmaller : styles.reviewInfo}>
                <div className={styles.title}>
                    {props.mypageMode ?
                    <>
                    <div className={styles.placeName}>{props.review.placeName}</div>
                    <div className={styles.category}>{props.review.category}</div>
                    </>
                    :
                    <>
                    <img className={styles.userProfileImg} src={props.review.userProfileImgUrl} />
                    <div className={styles.username}>{props.review.username}</div>
                    </>
                    }
                </div>
                <div className={styles.content}>{props.review.content}</div>
                {/* 이미지 */}
                <div className={props.mappageMode ? styles.imageContainerSmaller : styles.imageContainer}>
                {props.review.images.map((imgUrl, i) =>
                    imgUrl != "" && <img src={imgUrl} onClick={() => viewImage(imgUrl)} />
                )}
                </div>
                <div className={styles.meta}>
                    <div className={styles.rate}>
                    {props.review.rate == 0 ?
                    <>
                        <div>
                            <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="16" cy="16" r="16" fill="#FFDC5F"/>
                            <path d="M12.4131 10.8333C12.8078 10.8333 13.0851 10.9293 13.2451 11.1213C13.4051 11.3133 13.4851 11.5426 13.4851 11.8093C13.4851 12.0866 13.4051 12.3213 13.2451 12.5133C13.0851 12.716 12.8078 12.8173 12.4131 12.8173C12.0291 12.8173 11.7518 12.716 11.5811 12.5133C11.4105 12.3213 11.3251 12.0866 11.3251 11.8093C11.3251 11.5426 11.4105 11.3133 11.5811 11.1213C11.7518 10.9293 12.0291 10.8333 12.4131 10.8333ZM19.2611 10.8333C19.6665 10.8333 19.9491 10.9293 20.1091 11.1213C20.2691 11.3133 20.3491 11.5426 20.3491 11.8093C20.3491 12.0866 20.2691 12.3213 20.1091 12.5133C19.9491 12.716 19.6665 12.8173 19.2611 12.8173C18.8771 12.8173 18.5998 12.716 18.4291 12.5133C18.2585 12.3213 18.1731 12.0866 18.1731 11.8093C18.1731 11.5426 18.2585 11.3133 18.4291 11.1213C18.5998 10.9293 18.8771 10.8333 19.2611 10.8333Z" fill="black"/>
                            <path d="M15.9331 17.4788C16.8078 17.4788 17.6611 17.5588 18.4931 17.7188C19.3251 17.8895 20.1198 18.1508 20.8771 18.5028C21.6345 18.8548 22.3331 19.2975 22.9731 19.8308L22.9731 21.1588C22.3118 20.6681 21.5971 20.2521 20.8291 19.9108C20.0611 19.5801 19.2665 19.3295 18.4451 19.1588C17.6238 18.9881 16.7918 18.9028 15.9491 18.9028C15.1278 18.9028 14.3118 18.9881 13.5011 19.1588C12.6905 19.3295 11.9118 19.5801 11.1651 19.9108C10.4078 20.2415 9.69314 20.6521 9.02114 21.1428L9.02114 19.8308C9.65048 19.2975 10.3385 18.8548 11.0851 18.5028C11.8211 18.1508 12.5998 17.8895 13.4211 17.7188C14.2425 17.5588 15.0798 17.4788 15.9331 17.4788Z" fill="black"/>
                            </svg>
                        </div>
                        <div className={styles.rateText}>별로예요</div>
                    </>
                    : null
                    }
                    {props.review.rate == 1 ?
                    <>
                        <div>
                            <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="16" cy="16" r="16" fill="#FFDC5F"/>
                            <path d="M12.5772 10.74C12.9718 10.74 13.2492 10.836 13.4092 11.028C13.5692 11.22 13.6492 11.4493 13.6492 11.716C13.6492 11.9933 13.5692 12.228 13.4092 12.42C13.2492 12.6227 12.9718 12.724 12.5772 12.724C12.1932 12.724 11.9158 12.6227 11.7452 12.42C11.5745 12.228 11.4892 11.9933 11.4892 11.716C11.4892 11.4493 11.5745 11.22 11.7452 11.028C11.9158 10.836 12.1932 10.74 12.5772 10.74ZM19.4252 10.74C19.8305 10.74 20.1132 10.836 20.2732 11.028C20.4332 11.22 20.5132 11.4493 20.5132 11.716C20.5132 11.9933 20.4332 12.228 20.2732 12.42C20.1132 12.6227 19.8305 12.724 19.4252 12.724C19.0412 12.724 18.7638 12.6227 18.5932 12.42C18.4225 12.228 18.3372 11.9933 18.3372 11.716C18.3372 11.4493 18.4225 11.22 18.5932 11.028C18.7638 10.836 19.0412 10.74 19.4252 10.74Z" fill="black"/>
                            <path d="M15.3772 17.3855L16.6252 17.3855L16.6252 21.2575L15.3772 21.2575L15.3772 17.3855Z" fill="black"/>
                            </svg>
                        </div>
                        <div className={styles.rateText}>평범해요</div>
                    </>
                    : null
                    }
                    {props.review.rate == 2 ?
                    <>
                        <div>
                            <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="16" cy="16" r="16" fill="#FFDC5F"/>
                            <path d="M12.55 10.92C12.9446 10.92 13.222 11.016 13.382 11.208C13.542 11.4 13.622 11.6293 13.622 11.896C13.622 12.1733 13.542 12.408 13.382 12.6C13.222 12.8026 12.9446 12.904 12.55 12.904C12.166 12.904 11.8886 12.8026 11.718 12.6C11.5473 12.408 11.462 12.1733 11.462 11.896C11.462 11.6293 11.5473 11.4 11.718 11.208C11.8886 11.016 12.166 10.92 12.55 10.92ZM19.398 10.92C19.8033 10.92 20.086 11.016 20.246 11.208C20.406 11.4 20.486 11.6293 20.486 11.896C20.486 12.1733 20.406 12.408 20.246 12.6C20.086 12.8026 19.8033 12.904 19.398 12.904C19.014 12.904 18.7366 12.8026 18.566 12.6C18.3953 12.408 18.31 12.1733 18.31 11.896C18.31 11.6293 18.3953 11.4 18.566 11.208C18.7366 11.016 19.014 10.92 19.398 10.92Z" fill="black"/>
                            <path d="M15.9331 21.0855C15.0798 21.0855 14.2425 21.0001 13.4211 20.8295C12.5998 20.6695 11.8211 20.4135 11.0851 20.0615C10.3385 19.7201 9.65048 19.2775 9.02114 18.7335L9.02114 17.4215C9.69314 17.9121 10.4078 18.3228 11.1651 18.6535C11.9118 18.9841 12.6905 19.2348 13.5011 19.4055C14.3118 19.5761 15.1278 19.6615 15.9491 19.6615C16.7918 19.6615 17.6238 19.5761 18.4451 19.4055C19.2665 19.2348 20.0611 18.9841 20.8291 18.6535C21.5971 18.3228 22.3118 17.9068 22.9731 17.4055L22.9731 18.7335C22.3331 19.2775 21.6345 19.7201 20.8771 20.0615C20.1198 20.4135 19.3251 20.6695 18.4931 20.8295C17.6611 21.0001 16.8078 21.0855 15.9331 21.0855Z" fill="black"/>
                            </svg>
                        </div>
                        <div className={styles.rateText}>최고예요</div>
                    </>
                    : null
                    }
                    </div>
                    <div className={styles.rateBorder} />
                    <div className={styles.createdBy}>{props.review.createdBy}</div>
                    {props.mappageMode &&
                    <div className={styles.reviewLikeSmaller}>
                        <svg width="20" height="19" viewBox="0 0 20 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clipPath="url(#clip0_172_152)">
                        <path d="M5.26794 6.82697H0.533203V17.7081H5.26794V6.82697Z" stroke="#B0B0B0" strokeWidth="2" strokeMiterlimit="10"/>
                        <path d="M5.26758 6.82697L7.66161 0.525146H10.8128V6.82697H19.4665V18.4748H10.8128L5.26758 16.1537V6.82697Z" stroke="#B0B0B0" strokeWidth="2" strokeMiterlimit="10"/>
                        <path d="M2.90045 15.3764C3.33627 15.3764 3.68957 15.0285 3.68957 14.5992C3.68957 14.17 3.33627 13.822 2.90045 13.822C2.46463 13.822 2.11133 14.17 2.11133 14.5992C2.11133 15.0285 2.46463 15.3764 2.90045 15.3764Z" fill="#B0B0B0"/>
                        </g>
                        <defs>
                        <clipPath id="clip0_172_152">
                        <rect width="20" height="19" fill="white"/>
                        </clipPath>
                        </defs>
                        </svg>
                        <div className={styles.recommendSmaller}>{props.review.recommend}</div>
                    </div>
                    }
                </div>
            </div>
            {!props.mappageMode &&
            <div className={styles.others}>
                {props.mypageMode ?
                <div className={styles.reviewMenu} onClick={openMenu}>
                    <svg width="3" height="15" viewBox="0 0 3 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="1.5" cy="7.5" r="1.5" transform="rotate(90 1.5 7.5)" fill="#8C8C8C"/>
                    <circle cx="1.5" cy="13.5" r="1.5" transform="rotate(90 1.5 13.5)" fill="#8C8C8C"/>
                    <circle cx="1.5" cy="1.5" r="1.5" transform="rotate(90 1.5 1.5)" fill="#8C8C8C"/>
                    </svg>
                </div> : null }
                
                <div className={styles.reviewLike}>
                    <svg width="20" height="19" viewBox="0 0 20 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clipPath="url(#clip0_172_152)">
                    <path d="M5.26794 6.82697H0.533203V17.7081H5.26794V6.82697Z" stroke="#B0B0B0" strokeWidth="2" strokeMiterlimit="10"/>
                    <path d="M5.26758 6.82697L7.66161 0.525146H10.8128V6.82697H19.4665V18.4748H10.8128L5.26758 16.1537V6.82697Z" stroke="#B0B0B0" strokeWidth="2" strokeMiterlimit="10"/>
                    <path d="M2.90045 15.3764C3.33627 15.3764 3.68957 15.0285 3.68957 14.5992C3.68957 14.17 3.33627 13.822 2.90045 13.822C2.46463 13.822 2.11133 14.17 2.11133 14.5992C2.11133 15.0285 2.46463 15.3764 2.90045 15.3764Z" fill="#B0B0B0"/>
                    </g>
                    <defs>
                    <clipPath id="clip0_172_152">
                    <rect width="20" height="19" fill="white"/>
                    </clipPath>
                    </defs>
                    </svg>
                    <div className={styles.recommend}>{props.review.recommend}</div>
                </div>
            </div>
            }
            {toggleMenu && props.mypageMode ?
            <div className={styles.subMenu} ref={menuRef}>
                <div className={styles.deleteBtn} onClick={deleteHandler}>삭제하기</div>
            </div>
            : null
            }
        </div>
    );
}

export default Review;import React from "react";
import styles from "./NavBar.module.css"
import LoginButton from "../login/LoginButton";
import { Container, Nav, Navbar, Image } from "react-bootstrap";
import 'bootstrap/dist/css/bootstrap.min.css';
import { useSelector } from 'react-redux'
import LogoutButton from "../login/LogoutButton"
import { ReactComponent as LogoSvg } from "../../images/svg/navbar-logo.svg";


function NavBar() {
    const userinfo = useSelector((state) => state.userReducer.userinfo)

    return (
        <Navbar expand="lg" bg="white" variant="light" sticky="top" className={styles.navbar}>
            <Container style={{ width: "75%" }}>
                <Navbar.Brand href="/" className={styles.logoContainer}>
                    <LogoSvg className={styles.logoSvg}/>
                </Navbar.Brand>
                <Nav className={`me-auto ${styles.nav}`}>
                    <Nav.Link href="/about">서비스 소개</Nav.Link>
                    <Nav.Link href="/map">지도</Nav.Link>
                    <Nav.Link href="/mypage">마이페이지</Nav.Link>
                </Nav>
                <Nav>
                    {
                        userinfo == null ? <LoginButton /> :
                        <>
                            <div className={styles.userprofile}>
                                <Image
                                    src={userinfo.profileImageUrl}
                                    roundedCircle
                                />
                                <p><b>{userinfo.name}</b> 메이트님</p>
                            </div>
                            <LogoutButton />
                        </>
                    }
                </Nav>
            </Container>
        </Navbar>
    );
}

export default NavBar;import React, { useEffect, useState } from "react";
import styles from "./MainGageInfo.module.css";
import LikeButton from "../like/LikeButton";
import Carousel from "../etc/Carousel";

function MainGageInfo(props){
    console.log(props)
    const [storeImg, setStoreImg] = useState([]);

    // const testData = [
    //     {
    //       image: "../img/main-carousel/main-carousel-1.png",
    //       link: "/about"
    //     },
    //     {
    //       image: "../img/main-carousel/main-carousel-2.png",
    //       link: "/map-service/main"
    //     },
    //     {
    //       image: "../img/slideImg1.png",
    //       link: "/mypage"
    //     }
    //   ];

    useEffect(() => {
        if(props.information.image != undefined) {
            let imgList = []
            props.information.image.forEach((img) => {
                let imgData = {}
                imgData["image"] = img;
                imgData["link"] = img;
                imgList.push(imgData);
            })
            setStoreImg(imgList);
        }
    }, [props.information])

    return(
        <div style={{marginBottom: "100px"}}> {/* 이부분 */}
            <div className={styles.infoContainer}> {/* 코드 */}
                <div style={{width: "730px", flexShrink: "0", marginLeft: "-35px"}}> {/* 수정하지마세요 */}
                    <Carousel
                        dataList={storeImg}
                        outerViewWidth={"660px"}
                        outerViewHeight={"400px"}
                        imageWidth={"400px"}
                        imageHeight={"400px"}
                        imageRadius={24}
                        gap={38}
                        innerViewOverflow={"hidden"}
                        buttonSize={50}
                        scrollStep={"one"}
                        autoScroll={true}
                        showBullets={false}
                    />
                </div>
                <div className={styles.gageInfo}>
                    <div className={styles.titleContainer}>
                        <div className={styles.gageCircle}>
                            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><circle  cx="11" cy="11" r="11" fill="#E97869"/></svg>
                        </div>
                        <div className={styles.gageInfoContainer}>
                            <span className={styles.gageName}>{props.information.name}</span>
                            <span className={styles.gageGubun}>{props.information.gubun}</span>
                        </div>
                        <div className={styles.likeButton}><LikeButton placeId={props.information.id}/></div>
                    </div>

                    <div className={styles.gageContentContainer}>
                        <svg width="14" height="18" viewBox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clipPath="url(#clip0_845_597)">
                        <path d="M6.54545 18C6.47616 18.0001 6.40772 17.9843 6.3451 17.9536C6.28248 17.9229 6.22725 17.878 6.18341 17.8225C5.92617 17.5268 0 10.3801 0 6.77217C0.00252025 4.97688 0.692946 3.25591 1.91991 1.98644C3.14688 0.716978 4.81026 0.00260755 6.54545 0C8.27976 0.00261192 9.94218 0.717298 11.1676 1.98705C12.3931 3.25679 13.0814 4.97779 13.0814 6.77217C13.0814 10.3801 7.15523 17.5268 6.89798 17.8225C6.85517 17.8768 6.80146 17.9208 6.74059 17.9514C6.67972 17.982 6.61313 17.9986 6.54545 18ZM6.54545 0.985761C5.06218 0.985761 3.63966 1.59536 2.59082 2.68052C1.54199 3.76568 0.952759 5.23752 0.952759 6.77217C0.952759 9.28587 4.6971 14.4512 6.54545 16.7382C8.38428 14.4512 12.1286 9.28587 12.1286 6.77217C12.1286 5.23923 11.5407 3.76889 10.4939 2.68401C9.44715 1.59913 8.02707 0.988373 6.54545 0.985761Z" fill="#8C8C8C"/>
                        <path d="M6.54529 9.49294C5.78723 9.49294 5.06023 9.18138 4.52419 8.62679C3.98816 8.07219 3.68701 7.31997 3.68701 6.53565C3.68701 5.75133 3.98816 4.99912 4.52419 4.44452C5.06023 3.88992 5.78723 3.57837 6.54529 3.57837C7.30335 3.57837 8.03037 3.88992 8.5664 4.44452C9.10243 4.99912 9.40357 5.75133 9.40357 6.53565C9.40357 7.31997 9.10243 8.07219 8.5664 8.62679C8.03037 9.18138 7.30335 9.49294 6.54529 9.49294ZM6.54529 4.63308C6.03991 4.63308 5.55525 4.84082 5.1979 5.21055C4.84054 5.58029 4.63977 6.08172 4.63977 6.6046C4.63977 7.12748 4.84054 7.62904 5.1979 7.99877C5.55525 8.3685 6.03991 8.57613 6.54529 8.57613C7.05066 8.57613 7.53534 8.3685 7.89269 7.99877C8.25005 7.62904 8.45081 7.12748 8.45081 6.6046C8.45081 6.08172 8.25005 5.58029 7.89269 5.21055C7.53534 4.84082 7.05066 4.63308 6.54529 4.63308Z" fill="#8C8C8C"/>
                        </g>
                        <defs>
                        <clipPath id="clip0_845_597">
                        <rect width="13.0909" height="18" fill="white"/>
                        </clipPath>
                        </defs>
                        </svg>
                        <div className={styles.gageContent}>  
                            <div className={styles.gageContentTitle}>주소</div>
                            <div>{props.information.address}</div>
                        </div>  
                    </div>

                    <div className={styles.gageContentContainer}>
                        <svg width="14" height="16" viewBox="0 0 14 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clipPath="url(#clip0_845_587)">
                        <path d="M6.63901 16C5.32594 16 4.04235 15.6107 2.95058 14.8812C1.8588 14.1517 1.00786 13.1148 0.50537 11.9017C0.00287972 10.6886 -0.128599 9.35367 0.127568 8.06583C0.383736 6.77799 1.01604 5.59504 1.94453 4.66656C2.87301 3.73807 4.05596 3.10578 5.3438 2.84962C6.63164 2.59345 7.96652 2.72492 9.17964 3.22741C10.3928 3.7299 11.4296 4.58084 12.1591 5.67261C12.8886 6.76439 13.278 8.04798 13.278 9.36105C13.278 11.1218 12.5786 12.8105 11.3335 14.0555C10.0884 15.3006 8.39978 16 6.63901 16ZM6.63901 3.82854C5.54478 3.82854 4.47512 4.15302 3.56531 4.76094C2.65549 5.36886 1.94638 6.23291 1.52764 7.24384C1.1089 8.25478 0.99934 9.36718 1.21281 10.4404C1.42629 11.5136 1.9532 12.4994 2.72693 13.2731C3.50067 14.0469 4.48647 14.5738 5.55967 14.7872C6.63287 15.0007 7.74527 14.8912 8.7562 14.4724C9.76713 14.0537 10.6312 13.3446 11.2391 12.4347C11.847 11.5249 12.1715 10.4553 12.1715 9.36105C12.1715 7.89373 11.5886 6.48652 10.5511 5.44897C9.51354 4.41143 8.10632 3.82854 6.63901 3.82854Z" fill="#8C8C8C"/>
                        <path d="M7.19244 0.509033H6.08594V3.27529H7.19244V0.509033Z" fill="#8C8C8C"/>
                        <path d="M9.95833 0H3.28613V1.1065H9.95833V0Z" fill="#8C8C8C"/>
                        <path d="M9.95852 10.4675H6.07471V6.0415H7.18121V9.36101H9.95852V10.4675Z" fill="#8C8C8C"/>
                        </g>
                        <defs>
                        <clipPath id="clip0_845_587">
                        <rect width="13.278" height="16" fill="white"/>
                        </clipPath>
                        </defs>
                        </svg>
                        <div className={styles.gageContent}>
                            <div className={styles.gageContentTitle}>영업시간</div>
                            <div>{props.information.usage_of_week_and_time}</div>
                        </div>           
                    </div>

                    <div className={styles.gageContentContainer}>
                        <svg width="12" height="16" viewBox="0 0 12 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1.95543 0.425698L3.05363 0.0923508C3.55354 -0.0596395 4.09126 -0.0230992 4.5664 0.195151C5.04154 0.4134 5.42163 0.798443 5.63572 1.2784L6.31912 2.81046C6.50326 3.22319 6.55456 3.68366 6.46581 4.12726C6.37706 4.57086 6.15272 4.97533 5.82427 5.2839L4.63014 6.40595C4.61538 6.41984 4.60328 6.43633 4.59442 6.45462C4.46938 6.71196 4.65925 7.39932 5.254 8.43803C5.92482 9.60875 6.44283 10.0714 6.68298 10.0001L8.25023 9.51674C8.67944 9.38466 9.13891 9.39123 9.56423 9.53554C9.98955 9.67985 10.3594 9.95465 10.6219 10.3214L11.5931 11.6768C11.898 12.1024 12.0393 12.6251 11.9906 13.1477C11.9419 13.6703 11.7066 14.1573 11.3285 14.5183L10.4929 15.315C10.2024 15.5923 9.84954 15.7947 9.46455 15.9049C9.07955 16.0151 8.67382 16.0298 8.28198 15.9477C5.95526 15.4597 3.87066 13.5716 2.01034 10.3248C0.149358 7.07598 -0.430836 4.30919 0.316733 2.03377C0.441872 1.65282 0.656164 1.30783 0.941501 1.02793C1.22684 0.748043 1.57484 0.54148 1.95609 0.425698H1.95543ZM2.24255 1.38307C2.01379 1.45251 1.80497 1.57642 1.63375 1.74433C1.46252 1.91224 1.33392 2.11922 1.2588 2.34778C0.614438 4.30853 1.13641 6.7993 2.86971 9.82476C4.60169 12.8482 6.47922 14.5483 8.48376 14.9683C8.71898 15.0176 8.96254 15.0088 9.19364 14.9426C9.42474 14.8764 9.63651 14.7549 9.81086 14.5883L10.6458 13.7923C10.8495 13.5979 10.9762 13.3357 11.0025 13.0543C11.0288 12.7729 10.9528 12.4914 10.7887 12.2622L9.81748 10.9061C9.67613 10.7087 9.47703 10.5607 9.24806 10.483C9.01909 10.4053 8.77174 10.4017 8.54066 10.4728L6.96944 10.9575C6.10014 11.2181 5.28244 10.4881 4.39462 8.93739C3.64242 7.62533 3.38177 6.67729 3.70329 6.01526C3.76547 5.88726 3.85015 5.77192 3.95336 5.67458L5.14748 4.55254C5.32441 4.38638 5.44527 4.16857 5.49309 3.92966C5.5409 3.69076 5.51328 3.44276 5.4141 3.22048L4.7307 1.68908C4.61542 1.43058 4.41072 1.2232 4.15482 1.10566C3.89892 0.98813 3.60931 0.968483 3.34009 1.05039L2.24189 1.38374L2.24255 1.38307Z" fill="#8C8C8C"/>
                        </svg>
                        <div className={styles.gageContent}>
                            <div className={styles.gageContentTitle}>전화번호</div>
                            <div>{props.information.cntct}</div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    );
}

export default MainGageInfo;import axios from "axios";
import React from "react";
import { useState, useEffect } from "react";
import Carousel from "../etc/Carousel";
import styles from './RecentReview.module.css';
import { ReactComponent as KakaoMapSvg } from "../../images/svg/recent-review-kakao-map.svg";
import { useNavigate } from "react-router-dom";
import { useMediaQuery } from "react-responsive"

function RecentReview(){
    const navigate = useNavigate();
    const SERVER = "eats-mate.com:8081"
    const [information, setInformation] = useState(undefined); // 백엔드에서 받아온 정보 객체 리스트
    const [currentInfo, setCurrentInfo] = useState({}); // 버튼 클릭하면 나와야 하는 단일 정보 객체
    const [btnClick, setBtnClick] = useState([]);

    const isPc = useMediaQuery({ query: "(min-width:481px)" });
    const isMobile = useMediaQuery({ query: "(max-width:480px)" });

    useEffect(() => {
        getRecentReview();
        setBtnClick([true, false, false, false, false]);
    }, [])

    async function getRecentReview() {
        let res = await axios.get("https://" + SERVER + "/review-service/review/recent")
        let info = res.data;

        info.forEach((o) => {
            o.image = generateCarouselData(o.image) // 이미지 포맷 전처리
            o.review.forEach((r, i) => (o.review[i].createdBy = r.createdBy.replaceAll('-', '. ')));
        });

        setInformation(info); // 전체 데이터 저장
        setCurrentInfo(info[0]) // 당장 보여줄 데이터 지정
    }

    // Carousel에 맞는 이미지 데이터 객체로 변환
    function generateCarouselData(image) {
        let imgList = [];
        image.forEach((img) => {
            let imgData = {};
            imgData["image"] = img;
            imgData["link"] = img;
            imgList.push(imgData);
        });
        return imgList;
    }

    function handleBtnClick(idx) {
        setCurrentInfo(information[idx]);
        let clickMatrix = [false, false, false, false, false];
        clickMatrix[idx] = true;
        setBtnClick(clickMatrix);
    }
    

    return (
        <>
        <div className={styles.title}>최근에 달린 식당 리뷰를 참고해보세요</div>

        <div className={styles.buttonContainer}>
            <button className={btnClick[0] ? styles.buttonClicked : styles.button} onClick={() => {handleBtnClick(0)}}>강남구</button>
            <button className={btnClick[1] ? styles.buttonClicked : styles.button} onClick={() => {handleBtnClick(1)}}>광진구</button>
            <button className={btnClick[2] ? styles.buttonClicked : styles.button} onClick={() => {handleBtnClick(2)}}>서대문구</button>
            <button className={btnClick[3] ? styles.buttonClicked : styles.button} onClick={() => {handleBtnClick(3)}}>용산구</button>
            <button className={btnClick[4] ? styles.buttonClicked : styles.button} onClick={() => {handleBtnClick(4)}}>마포구</button>
        </div>

        {information &&
        <div className={styles.contentContainer}>
            <div className={styles.carouselContainer}>
            {isPc && <Carousel
                dataList={currentInfo.image}
                outerViewWidth={"600px"}
                outerViewHeight={"380px"}
                imageWidth={"100%"}
                imageHeight={"100%"}
                imageRadius={32}
                gap={0}
                innerViewOverflow={"hidden"}
                buttonSize={50}
                buttonColor={"#8F7BF7"}
                scrollStep={"full"}
                autoScroll={true}
                showBullets={false}
            />
            }
            {isMobile && <Carousel
                dataList={currentInfo.image}
                outerViewWidth={"375px"}
                outerViewHeight={"240px"}
                imageWidth={"100%"}
                imageHeight={"100%"}
                imageRadius={32}
                gap={0}
                innerViewOverflow={"hidden"}
                buttonSize={40}
                buttonColor={"#8F7BF7"}
                scrollStep={"full"}
                autoScroll={true}
                showBullets={false}
            />
            }
            </div>

            <div className={styles.storeInfo} onClick={() => navigate("/detail/" + currentInfo.name)}>
                <div style={{display: 'flex'}}>
                    <div style={{display: 'flex', flexDirection: 'column'}}>
                        <div style={{display: 'flex', marginBottom: '16px'}}>
                            <div className={styles.name}>{currentInfo.name}</div>
                            <div className={styles.border} />
                            <div className={styles.gubun}>{currentInfo.gubun}</div>
                        </div>
                        <div style={{display: 'flex', marginBottom: '8px'}}>
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clipPath="url(#clip0_31_172)">
                            <path d="M11.5455 21C11.4762 21.0001 11.4077 20.9843 11.3451 20.9536C11.2825 20.9229 11.2272 20.878 11.1834 20.8225C10.9262 20.5268 5 13.3801 5 9.77217C5.00252 7.97688 5.69295 6.25591 6.91991 4.98644C8.14688 3.71698 9.81026 3.00261 11.5455 3C13.2798 3.00261 14.9422 3.7173 16.1676 4.98705C17.3931 6.25679 18.0814 7.97779 18.0814 9.77217C18.0814 13.3801 12.1552 20.5268 11.898 20.8225C11.8552 20.8768 11.8015 20.9208 11.7406 20.9514C11.6797 20.982 11.6131 20.9986 11.5455 21ZM11.5455 3.98576C10.0622 3.98576 8.63966 4.59536 7.59082 5.68052C6.54199 6.76568 5.95276 8.23752 5.95276 9.77217C5.95276 12.2859 9.6971 17.4512 11.5455 19.7382C13.3843 17.4512 17.1286 12.2859 17.1286 9.77217C17.1286 8.23923 16.5407 6.76889 15.4939 5.68401C14.4472 4.59913 13.0271 3.98837 11.5455 3.98576V3.98576Z" fill="white"/>
                            <path d="M11.5454 12.4929C10.7873 12.4929 10.0603 12.1813 9.52432 11.6267C8.98829 11.0721 8.68713 10.3199 8.68713 9.53561C8.68713 8.75129 8.98829 7.99907 9.52432 7.44447C10.0603 6.88988 10.7873 6.57832 11.5454 6.57832C12.3035 6.57832 13.0305 6.88988 13.5665 7.44447C14.1026 7.99907 14.4037 8.75129 14.4037 9.53561C14.4037 10.3199 14.1026 11.0721 13.5665 11.6267C13.0305 12.1813 12.3035 12.4929 11.5454 12.4929ZM11.5454 7.63303C11.04 7.63303 10.5554 7.84078 10.198 8.21051C9.84067 8.58024 9.63989 9.08168 9.63989 9.60456C9.63989 10.1274 9.84067 10.629 10.198 10.9987C10.5554 11.3685 11.04 11.5761 11.5454 11.5761C12.0508 11.5761 12.5355 11.3685 12.8928 10.9987C13.2502 10.629 13.4509 10.1274 13.4509 9.60456C13.4509 9.08168 13.2502 8.58024 12.8928 8.21051C12.5355 7.84078 12.0508 7.63303 11.5454 7.63303Z" fill="white"/>
                            </g>
                            <defs>
                            <clipPath id="clip0_31_172">
                            <rect width="13.0909" height="18" fill="white" transform="translate(5 3)"/>
                            </clipPath>
                            </defs>
                            </svg>
                            <div className={styles.address}>{currentInfo.address}</div>
                        </div>
                        <div style={{display: 'flex'}}>
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_31_179)">
                            <path d="M11.639 20C10.3259 20 9.04235 19.6106 7.95058 18.8811C6.8588 18.1516 6.00786 17.1147 5.50537 15.9016C5.00288 14.6885 4.8714 13.3536 5.12757 12.0658C5.38374 10.7779 6.01604 9.59498 6.94453 8.6665C7.87301 7.73801 9.05596 7.10572 10.3438 6.84956C11.6316 6.59339 12.9665 6.72486 14.1796 7.22735C15.3928 7.72984 16.4296 8.58078 17.1591 9.67255C17.8886 10.7643 18.278 12.0479 18.278 13.361C18.278 15.1218 17.5786 16.8104 16.3335 18.0555C15.0884 19.3005 13.3998 20 11.639 20ZM11.639 7.82848C10.5448 7.82848 9.47512 8.15296 8.56531 8.76088C7.65549 9.3688 6.94638 10.2328 6.52764 11.2438C6.1089 12.2547 5.99934 13.3671 6.21281 14.4403C6.42629 15.5135 6.9532 16.4993 7.72693 17.2731C8.50067 18.0468 9.48647 18.5737 10.5597 18.7872C11.6329 19.0007 12.7453 18.8911 13.7562 18.4724C14.7671 18.0536 15.6312 17.3445 16.2391 16.4347C16.847 15.5249 17.1715 14.4552 17.1715 13.361C17.1715 11.8937 16.5886 10.4865 15.5511 9.44891C14.5135 8.41136 13.1063 7.82848 11.639 7.82848Z" fill="white"/>
                            <path d="M12.1922 4.50899H11.0857V7.27524H12.1922V4.50899Z" fill="white"/>
                            <path d="M14.9585 4H8.28625V5.1065H14.9585V4Z" fill="white"/>
                            <path d="M14.9585 14.4675H11.0747V10.0415H12.1812V13.361H14.9585V14.4675Z" fill="white"/>
                            </g>
                            <defs>
                            <clipPath id="clip0_31_179">
                            <rect width="13.278" height="16" fill="white" transform="translate(5 4)"/>
                            </clipPath>
                            </defs>
                            </svg>
                            <div className={styles.time}>{currentInfo.time}</div>
                        </div>
                    </div>
                    {isPc &&
                    <div style={{marginLeft: '40px'}}> {/* 카카오 아이콘 */}
                        <KakaoMapSvg />
                    </div>
                    }
                    {isMobile &&
                    <div style={{display: 'flex', flex: '1'}}> {/* 카카오 아이콘 */}
                        <KakaoMapSvg className={styles.kakaoMobileSvg} />
                    </div>
                    }
                </div>
            </div>
            
            <div className={styles.reviewContainer}>
                {currentInfo.review.map((r,i) => {
                    return (
                    <div className={styles.review}>
                        <div className={styles.content}>{r.content}</div>
                        <div className={styles.createdBy}>{r.createdBy}</div>
                    </div>
                    );
                })
                }
            </div>
        </div>
        }

        </>
    );
    
}

export default RecentReview;
import { useState } from "react";
import axios from 'axios';
import { useDispatch, useSelector } from "react-redux";
import { changeUserInfo, reissueJWT } from '../../_actions/user_action';
import styles from "./ReviewModal.module.css";
import { useNavigate } from "react-router-dom";
import { ReactComponent as Rate0Svg } from "../../images/svg/rate-0.svg";
import { ReactComponent as Rate1Svg } from "../../images/svg/rate-1.svg";
import { ReactComponent as Rate2Svg } from "../../images/svg/rate-2.svg";

function ReviewModal(props) {
  const SERVER = "eats-mate.com:8081"
  const userinfo = useSelector((state) => state.userReducer.userinfo)
  const dispatch = useDispatch();
  const [imageList, setImageList] = useState([]);
  const navigate = useNavigate();
  const [selectedIdx, setSelectedIdx] = useState(-1); // rate value
  const [contentText, setContentText] = useState(""); // content string

  function addImageFile(e) {
    if (e.target.files.length === 0) {
      console.warn("파일이 추가되지 않았습니다.")
      return;
    }
    const imgFile = e.target.files[0];
    const newImageList = [...imageList, imgFile]
    setImageList(newImageList)
    console.log(newImageList)
  }

  function submitReview() {
    if(contentText.length < 10) {
      alert("10자 이상 입력해주세요.");
      return;
    }

    if(selectedIdx == -1) {
      alert("만족도를 선택해주세요.");
      return;
    }

    if (!confirm("리뷰를 등록하시겠어요?")) {
      return;
    }

    const jsonData = {
      placeName: props.information.name,
      gugun: props.information.gugun,
      content: contentText,
      category: props.information.gubun,
      createdBy: new Date().toISOString().substring(0, 10),
      rate: selectedIdx
    }

    const formData = new FormData();
    formData.append('json', new Blob([JSON.stringify(
      jsonData
    )], {
      type: "application/json"
    }));
    const imgList = [...imageList]
    imgList.forEach((img) => formData.append('image', img))

    // formData는 그냥 console.log로 보이지 않음
    for (var item of formData.entries()) {
      console.log(item[0] + " : " + item[1]);
    }

    axios.post("https://" + SERVER + "/review-service/review",
      formData,
      {
          headers: {
              "Authorization": 'Bearer ' + userinfo.accessToken,
              "Content-type": "multipart/form-data",
          },                    
      }
    )
    .then(res => {
        console.log(`Success` + res.data);
        window.alert(props.information.name + "을 리뷰해주셔서 감사합니다!");
        props.closeModal();
    })
    .catch(err => {
        console.log(err);
        window.alert("오류가 발생했습니다. 다시 시도해주세요.")
    })
  }

  async function checkExp() {
    if(userinfo != null) {
      const isTokenExpired = Date.now() >= userinfo.expirationTime - 10000;
      console.log('Date.now(): ', Date.now());
      console.log('exp - 10s: ', userinfo.expirationTime - 10000);
      console.log('isTokenExpired: ', isTokenExpired);

      if (isTokenExpired) {
        // invalid
        console.log("*** ACCESS TOKEN OUTDATED ***")
        try {
          const res = await axios.get("https://" + SERVER + "/user-service/auth/reissue",
            {
              withCredentials: true // Set-Cookie 작동을 위해 필수
            }
          );
          let redux_res = await dispatch(reissueJWT(res.data))
          if (redux_res != undefined) {
            submitReview();
          }
          else {
            console.log("로그인 정보를 갱신하는 중입니다. 잠시만 기다려주세요.");
            setTimeout(checkExp, 200);
          }

        } catch(e) {
          console.log(e);
          console.log("*** REFRESH TOKEN OUTDATED ***")
          window.alert("로그인이 필요합니다.");  
          await logOut(); // rt outdated
        }
      }
      else {
        // valid
        console.log("*** VALID USERINFO ***")
        submitReview();
      }
    }
    else {
      // not logged in
      console.log("*** NOT LOGGED IN ***")
      window.alert("로그인이 필요합니다.");
      await logOut(); // rt outdated
    }
  }

  async function logOut() {
    // logout
    try {
      const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
          {
              withCredentials: true // Set-Cookie 작동을 위해 필수
          }
      );
    } catch(e) {
        console.warn(e);
    }
    dispatch(changeUserInfo(null))
    navigate("/")
  }

  return (
    <div className={styles.container}>
      <button className={styles.close} onClick={props.closeModal}>
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1 17L17 1" stroke="#E97869" strokeWidth="2" strokeLinecap="round"/>
        <path d="M1 1L17 17" stroke="#E97869" strokeWidth="2" strokeLinecap="round"/>
        </svg>
      </button>
      <div className={styles.reviewmodalname}><b>{userinfo.name}</b> 메이트님!</div>
      <div className={styles.reviewmodalname}>식사는 맛있게 하셨나요? 리뷰를 작성해보세요</div>

      <div className={styles.locationboxflex}>
        <img className={styles.reviewmodalimg} alt="" src={props.information.image[0]} />
        <div className={styles.locationboxflex2}>
          <div className={styles.reviewmodalcategory}>{props.information.gubun}</div>
          <b className={styles.reviewmodalname2}>{props.information.name}</b>

          <div className={styles.addressflex}>
            <img alt="" src="/img/location.png"></img>
            <div className={styles.reviewmodallocation}>{props.information.address}</div>
          </div>

        </div>
      </div>
      
      <hr className={styles.line2}></hr>
      <div className={styles.reviewmodalask}>
        <b>{props.information.name}</b>의 만족도는 어땠나요?
      </div>
      
      <div className={styles.rateContainer}>
          <div className={styles.ratebox} onClick={() => {setSelectedIdx(2)}}>
              <Rate2Svg className={selectedIdx == 2 ? styles.colored : styles.grayed} />
              <div className={selectedIdx == 2 ? styles.highlight : styles.normal}>최고예요</div>
          </div>
          <div className={styles.ratebox} onClick={() => {setSelectedIdx(1)}}>
              <Rate1Svg className={selectedIdx == 1 ? styles.colored : styles.grayed} />
              <div className={selectedIdx == 1 ? styles.highlight : styles.normal}>평범해요</div>
          </div>
          <div className={styles.ratebox} onClick={() => {setSelectedIdx(0)}}>
              <Rate0Svg className={selectedIdx == 0 ? styles.colored : styles.grayed} />
              <div className={selectedIdx == 0 ? styles.highlight : styles.normal}>별로예요</div>
          </div>
      </div>

      <div className={styles.addReview}>
        <textarea
          id="reviewBox"
          name="reviewBox"
          rows="3"
          cols="50"
          placeholder="자유롭게 경험을 공유해주세요!"
          value={contentText}
          onChange={(e)=>{setContentText(e.target.value)}}
        />

        <div className={styles.bottomContainer}>
          <div className={styles.reviewWarning}>
            <b>리뷰 작성 시 유의사항</b><br />
            무분별한 악성 후기는 통보 없이 삭제될 수 있습니다.<br />
            작성하신 후기는 잇츠메이트의 마케팅 홍보로 사용될 수 있습니다.
          </div>

          <div className={styles.addReviewImg}>
            {imageList.length ?
              imageList.map((image, idx) => {
                return (
                <div className={styles.preview}>
                  <img
                    src={URL.createObjectURL(image)}
                    alt="Thumb"
                  />
                </div>
              )}) : null
            }

            {imageList.length < 3 ?
            <>
              <input
                type="file"
                name="review_img"
                id="file"
                className={styles.imgInput}
                accept="image/jpg,image/png,image/jpeg"
                onChange={addImageFile}
              />
              <label className={styles.addButton} for="file">
                <svg width="24" height="23" viewBox="0 0 24 23" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2.66634 2.83333H17.833V11H20.1663V2.83333C20.1663 1.5465 19.1198 0.5 17.833 0.5H2.66634C1.37951 0.5 0.333008 1.5465 0.333008 2.83333V16.8333C0.333008 18.1202 1.37951 19.1667 2.66634 19.1667H11.9997V16.8333H2.66634V2.83333Z" fill="#E97869"/>
                <path d="M7.33301 9.83333L3.83301 14.5H16.6663L11.9997 7.5L8.49967 12.1667L7.33301 9.83333Z" fill="#E97869"/>
                <path d="M20.1663 13.3334H17.833V16.8334H14.333V19.1667H17.833V22.6667H20.1663V19.1667H23.6663V16.8334H20.1663V13.3334Z" fill="#E97869"/>
                </svg>
                <div>사진 추가</div>
              </label>
            </>
            : null
            }
          </div>
        </div>

        {/* 함수 수정 필요 */}
        <div className={styles.reviewModalBtn}>
          <button className={styles.uploadReview} onClick={checkExp}>
            등록
          </button>
          <button className={styles.closeReview} onClick={props.closeModal}>
            취소
          </button>
        </div>

      </div>
    </div>
  );
}

export default ReviewModal;
import React, { useEffect, useState } from "react";
import axios from 'axios';
import styles from './MainReview.module.css';
import { useLocation, useNavigate } from "react-router";
import ReviewCounter from "./ReviewCounter";
import Review from "../mypage/Review";

function MainReview(props){
    const SERVER = "eats-mate.com:8081"
    const placeName = useLocation().pathname.split("/").pop();
    const navigate = useNavigate();
    const [reviewList, setReviewList] = useState([]); // 리뷰 데이터 리스트
    const [rateList, setRateList] = useState([0, 0, 0]);

    // props 확인용
    useState(()=>{console.log(props.information)},[props])

    useEffect(() => {
        getUserReview();
        getReviewRate();
    }, []);
    
    async function getUserReview() {
        try {
            const res = await axios.get("https://" + SERVER + "/review-service/review/?place_name=" + placeName + "&amount=" + 2,
            );
            res.data.forEach((e, i) => res.data[i].createdBy = e.createdBy.replaceAll("-", ". "));
            setReviewList(res.data);
        } catch(e){
            throw e;
        }
    }

    async function getReviewRate() {
        try {
            const res = await axios.get("https://" + SERVER + "/review-service/review/count?place_name=" + placeName);
            setRateList(res.data);
        } catch(e){
            throw e;
        }
    }

    function gotoReviewPage() {
        navigate("/review/" + props.information.name);
    }

    return (
        <>
            <div className={styles.container}>
                <div className={styles.titleContainer}>
                    <div className={styles.title}>메이트들의 생생한 리뷰를 확인해보세요</div>
                    <div className={styles.allReviewButton} onClick={gotoReviewPage}>
                        <div>전체보기</div>
                        <svg width="12" height="20" viewBox="0 0 12 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 1L10 10L1 19" stroke="#A7A7A7" strokeWidth="1.5"/>
                        </svg>
                    </div>
                </div>

                <div className={styles.bottomContainer}>
                    <div className={styles.bottomLeftContainer}>
                        <div className={styles.counterBox}>
                            <div className={styles.reviewCountText}><b>{rateList[0] + rateList[1] + rateList[2]}건</b>의 리뷰가 있어요</div>
                            <ReviewCounter
                                rateVal={rateList}
                            />
                        </div>
                        <div className={styles.reviewReqTextContainer}>
                            <div style={{marginRight: "10px"}}>📢</div>
                            <div>{props.information.name}에서 혼밥해본 적이 있다면 직접 리뷰를 남겨보세요</div>
                        </div>
                        <div className={styles.reviewButton} onClick={props.showModal}>
                            <div>리뷰쓰러 가기</div>
                            <svg width="34" height="10" viewBox="0 0 34 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 9H31L23.1311 1" stroke="white" stroke-width="2" stroke-linecap="round"/>
                            </svg>
                        </div>
                    </div>

                    <div className={styles.bottomRightContainer}>
                    {reviewList.map((o, i) =>
                        <Review
                            review={o}
                            mypageMode={false}
                        />
                    )}
                    </div>
                </div>
            </div>
        </>
    );
}

export default MainReview;
import React from 'react';
import styled from 'styled-components';
import close from '../../../public/emonga.png';

const Container = styled.div`
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 100;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
`;

const Background = styled.div`
    position: fixed;
    width: 100%;
    height: 100%;
    background-color: rgba(255,255,255,0.15);
    backdrop-filter: blur(5px);
    animation: modal-bg-show 1s;
    @keyframes modal-bg-show {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
`;

const ModalBlock = styled.div`
    position: absolute;
    top: 6.5rem;
    border-radius: 10px;
    padding: 1.5rem;
    background-color: black;
    width: 60rem;
    @media (max-width: 1120px) {
        width: 50rem;
    }
    @media (max-width: 50rem) {
        width: 80%;
    }
    min-height: 35rem;
    animation: modal-show 1s;
    @keyframes modal-show {
        from {
            opacity: 0;
            margin-top: -50px;
        }
        to {
            opacity: 1;
            margin-top: 0;
        }
    }
`;

const Close = styled.img.attrs({
    src: close,
})`
    position: absolute;
    right: 1.5rem;
    top: 1.5rem;
    cursor: pointer;
`;

const Contents = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
`;

const ReviewModalFrame = ({ _handleModal, children, ...rest }) => {
    return (
        <Container>
            <Background onClick={_handleModal} />
            <ModalBlock {...rest}>
                <Close onClick={_handleModal} />
                <Contents>
                    {children}
                </Contents>
            </ModalBlock>
        </Container>
    );
};

export default ReviewModalFrame;

import React, { useState, useEffect } from 'react';
import { Map, MapMarker } from 'react-kakao-maps-sdk';
import styles from './DetailMap.module.css';
import { ReactComponent as KakaoMapSvg } from "../../images/svg/kakaomap-button.svg";

const DetailMap = (props) => {
  const [storePos, setStorePos] = useState({})
  const [centerPos, setCenterPos] = useState({})
  const [userPos, setUserPos] = useState(undefined);

  useEffect(() => {
    setStorePos({lat: props.information.lat, lng: props.information.lng})
    setCenterPos({lat: props.information.lat, lng: props.information.lng})
  }, [props.information.lat])

  function urlScheme(){
    let url;
    url = "https://map.kakao.com/link/to/" + props.information.name + "," + props.information.lat + "," + props.information.lng
    console.log(url);
    window.open(url, '_blank');
  }

  function copyText(){
    navigator.clipboard.writeText(props.information.address)
    alert("주소가 복사되었습니다.");
  }

  function getLocation() {
  if(navigator.geolocation)
      navigator.geolocation.getCurrentPosition(getUserLatLng);
  else
      alert("GPS를 지원하지 않는 브라우저입니다.");
  }

  function getUserLatLng(position){
    var lat = position.coords.latitude;
    var lng = position.coords.longitude;
    let pos = {};
    pos["lat"] = lat;
    pos["lng"] = lng;
    setUserPos(pos);
    setCenterPos(pos);
  }

  return (
    <>
      <div className={styles.detail_map_wrapper}>
        <div className={styles.detail_map_wrapper_top}>
          <p className={styles.detail_map_title}>찾아가는 길을 알려드릴게요</p>
          <div className={styles.detail_map_address}>
            <div className={styles.detail_map_box}>
              <svg width="14" height="18" viewBox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clipPath="url(#clip0_845_626)">
              <path d="M6.54545 18C6.47616 18.0001 6.40772 17.9843 6.3451 17.9536C6.28248 17.9229 6.22725 17.878 6.18341 17.8225C5.92617 17.5268 0 10.3801 0 6.77217C0.00252025 4.97688 0.692946 3.25591 1.91991 1.98644C3.14688 0.716978 4.81026 0.00260755 6.54545 0C8.27976 0.00261192 9.94218 0.717298 11.1676 1.98705C12.3931 3.25679 13.0814 4.97779 13.0814 6.77217C13.0814 10.3801 7.15523 17.5268 6.89798 17.8225C6.85517 17.8768 6.80146 17.9208 6.74059 17.9514C6.67972 17.982 6.61313 17.9986 6.54545 18ZM6.54545 0.985761C5.06218 0.985761 3.63966 1.59536 2.59082 2.68052C1.54199 3.76568 0.952759 5.23752 0.952759 6.77217C0.952759 9.28587 4.6971 14.4512 6.54545 16.7382C8.38428 14.4512 12.1286 9.28587 12.1286 6.77217C12.1286 5.23923 11.5407 3.76889 10.4939 2.68401C9.44715 1.59913 8.02707 0.988373 6.54545 0.985761Z" fill="#8C8C8C"/>
              <path d="M6.54529 9.49294C5.78723 9.49294 5.06023 9.18138 4.52419 8.62679C3.98816 8.07219 3.68701 7.31997 3.68701 6.53565C3.68701 5.75133 3.98816 4.99912 4.52419 4.44452C5.06023 3.88992 5.78723 3.57837 6.54529 3.57837C7.30335 3.57837 8.03037 3.88992 8.5664 4.44452C9.10243 4.99912 9.40357 5.75133 9.40357 6.53565C9.40357 7.31997 9.10243 8.07219 8.5664 8.62679C8.03037 9.18138 7.30335 9.49294 6.54529 9.49294ZM6.54529 4.63308C6.03991 4.63308 5.55525 4.84082 5.1979 5.21055C4.84054 5.58029 4.63977 6.08172 4.63977 6.6046C4.63977 7.12748 4.84054 7.62904 5.1979 7.99877C5.55525 8.3685 6.03991 8.57613 6.54529 8.57613C7.05066 8.57613 7.53534 8.3685 7.89269 7.99877C8.25005 7.62904 8.45081 7.12748 8.45081 6.6046C8.45081 6.08172 8.25005 5.58029 7.89269 5.21055C7.53534 4.84082 7.05066 4.63308 6.54529 4.63308Z" fill="#8C8C8C"/>
              </g>
              <defs>
              <clipPath id="clip0_845_626">
              <rect width="13.0909" height="18" fill="white"/>
              </clipPath>
              </defs>
              </svg>
              <div className={styles.detail_map_font}>{props.information.address}</div>

              <div className={styles.detail_icon}>
                <svg width="13" height="15" viewBox="0 0 13 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="3.5" y="0.5" width="9" height="11" rx="0.5" fill="white" stroke="#8E8E8E"/>
                <rect x="0.5" y="3.5" width="9" height="11" rx="0.5" fill="white" stroke="#8E8E8E"/>
                <path d="M2 7H8" stroke="#8E8E8E"/>
                <path d="M2 10H8" stroke="#8E8E8E"/>
                </svg>
              </div>
              <div onClick={copyText} className={styles.detail_map_font2}>
                주소 복사
              </div>
            </div>
          </div>
        </div>

        <div className={styles.detail_map}>
          {storePos.lat && // undefined 주면 안됨
          <>
          <Map
            className={styles.kakao_map} // 지도를 표시할 Container
            center={centerPos}
            onCenterChanged={(map) =>
              setCenterPos({
                lat: map.getCenter().getLat(),
                lng: map.getCenter().getLng()
              })
            }
            isPanto={true}
            style={{
              // 지도의 크기
              width: '100%',
              height: '50vh',
            }}
            level={3} // 지도의 확대 레벨
          >

            <MapMarker
            position={{lat: props.information.lat, lng: props.information.lng}}
            image={{
              src: "../img/map-marker/pin_fork.svg",
              size: {
                width: 64,
                height: 69
              }
            }}
            />
            {userPos != undefined &&
            <MapMarker
            position={{lat: userPos.lat, lng: userPos.lng}}
            image={{
              src: "../img/map-marker/pin_user.svg",
              size: {
                width: 64,
                height: 69
              }
            }}
            />
            }
          </Map>

          <div className={styles.buttonContainer}>
            <div className={styles.whiteButton} onClick={getLocation}><div>내 위치로 이동</div></div>
            <div className={styles.whiteButton} onClick={() => {setCenterPos(storePos)}}><div>가게 위치로 이동</div></div>
            <div className={styles.blackButton} onClick={urlScheme}>
              <KakaoMapSvg />
              <div>카카오맵에서 길찾기</div>
            </div>
          </div>
          </>
          }
        </div>
      </div>
    </>
  );
};

export default DetailMap;
import React, { useEffect } from "react";
import styles from "./ReviewCounter.module.css";
import { ReactComponent as Rate0Svg } from "../../images/svg/rate-0.svg";
import { ReactComponent as Rate1Svg } from "../../images/svg/rate-1.svg";
import { ReactComponent as Rate2Svg } from "../../images/svg/rate-2.svg";
import { useState } from "react";


function ReviewCounter(props) {
    const [highIdx, setHighIdx] = useState();

    useEffect(() => {
        var idx = props.rateVal.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);
        setHighIdx(idx);
    },[props]);

    return (
        <div className={styles.container}>
            <div className={styles.ratebox}>
                <Rate2Svg className={highIdx == 2 ? styles.colored : styles.grayed} />
                <div className={highIdx == 2 ? styles.highlight : styles.normal}>최고예요</div>
                <div className={styles.value}>{props.rateVal[2]}</div>
            </div>
            <div className={styles.ratebox}>
                <Rate1Svg className={highIdx == 1 ? styles.colored : styles.grayed} />
                <div className={highIdx == 1 ? styles.highlight : styles.normal}>평범해요</div>
                <div className={styles.value}>{props.rateVal[1]}</div>
            </div>
            <div className={styles.ratebox}>
                <Rate0Svg className={highIdx == 0 ? styles.colored : styles.grayed} />
                <div className={highIdx == 0 ? styles.highlight : styles.normal}>별로예요</div>
                <div className={styles.value}>{props.rateVal[0]}</div>
            </div>
        </div>
    );
}

export default ReviewCounter;import React, {useState} from "react";
import styles from "./Review.module.css";
import ReviewModal from "./ReviewModal";

function AllReview(props){

    const [modalOpen, setModalOpen] = useState(false);

    const showModal = () => {
        setModalOpen(true);
    }


    return(
        <>
            <div className={styles.responsivewrapper}>
                <br></br><br></br>
                <p className={styles.gagename}>총 3건의 리뷰가 있어요</p>
                <hr className={styles.line}/>

                <div className={styles.locationboxflex}>
                    <div className={styles.ratebox}>
                        <div className={styles.locationboxflex}>
                            <img className={styles.rateimg} src="/img/besttextcolor.png"></img>
                            <img className={styles.rateimg} src="/img/sosotext.png"></img>
                            <img className={styles.rateimg} src="/img/badtext.png"></img>
                        </div>
                    </div>

                    <div className={styles.locationboxflex}>
                    <div className={styles.carouselsize2}>

                    </div>
                    </div>

                    <div className={styles.locationboxflex2}>
                    <div className={styles.locationboxflex}>
                    <img className={styles.rrr} src="/img/rrr.png"></img>
                    <div className={styles.rrrcontent}>{props.information.name}에서 혼밥해본 적이 있다면 직접 리뷰를 남겨보세요</div>
                    </div>
                    <div>
                        <button className={styles.modalbutton} onClick={showModal}><img src="/img/goreview.png"></img></button>
                        {modalOpen && <ReviewModal setModalOpen={setModalOpen} />}
                    </div>
                    </div>
                </div>
    

                <div className={styles.reviewcontent}>말해뭐해 일단 너무 맛있고요... 혼자 건대갔다가 들렀는데 혼밥하기 좋아요 추천</div>
                <img className={styles.reviewimg} src="/img/emonga.jpeg" alt="first pic" />

                <div className={styles.locationboxflex}>
                    <img src="/img/emonga.jpeg" alt="first pic" className={styles.reviewwriterimg}></img>
                    <div className={styles.reviewwriter}>나는야먹짱</div>
                    <div className={styles.reviewdate}> | 2022.01.08</div>
                </div>

                <hr/>


                <div className={styles.reviewcontent}>말해뭐해 일단 너무 맛있고요... 혼자 건대갔다가 들렀는데 혼밥하기 좋아요 추천</div>
                <img className={styles.reviewimg} src="/img/emonga.jpeg" alt="first pic" />

                <div className={styles.locationboxflex}>
                    <img src="/img/emonga.jpeg" alt="first pic" className={styles.reviewwriterimg}></img>
                    <div className={styles.reviewwriter}>나는야먹짱</div>
                    <div className={styles.reviewdate}> | 2022.01.08</div>
                </div>

            </div>
        </>

    );
}

export default AllReview;/* global kakao */

import React, { useState, useEffect } from 'react';
import styles from './Map.module.css';
import axios from 'axios';

function categoryBtn(props) {

  const [gpsLoc, setGpsLoc] = useState({
    lat: 37.56076811229905,
    lng: 126.93694098263262,
  });
  const [border, setBorder] = useState("1px solid #CDCDCD");
  const [information, setInformation] = useState([]);

  useEffect(() => {
    props.propFunction(gpsLoc);
  }, [gpsLoc]);

  /*useEffect(() => {
    props.propFunction2(information);
  }, [information]);*/

  function getUserLoc() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        setGpsLoc({
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        });
        //props.propFunction(gpsLoc);
      }, function(error) {
        console.error(error);
      }, {
        enableHighAccuracy: true,
        maximumAge: 0,
        timeout: Infinity
      });
    } else {
      alert('GPS를 지원하지 않습니다');
    }
  }

  function gps() {
    getUserLoc();
  }

  /*function category(gubun) {
    setBorder('1px solid #e97869');
    var url = '/map-service/information/findByCategory/';
      
    axios.get(url + gubun +'/'+ gpsLoc.lat +'/'+ gpsLoc.lng).then((res) => {
      console.log(res.data);
      setInformation(res.data);
      //props.propFunction2(information);
    });
  }*/

  return (
    <>
      <div className={styles.category}>
        <ul>
          <li>
            <img
              className={styles.gps}
              alt="gps icon"
              onClick={() => gps()}
              src="/img/gps icon.jpg"
              width='50'
              height='50'
            />
          </li>
        </ul>
      </div>
    </>
  );
}
export default categoryBtn;
import React, { useEffect, useState } from 'react';
import styles from './MapCourse.module.css';
import { useDispatch, useSelector } from 'react-redux';
import { ReactComponent as Pin } from '../../images/svg/course-pin.svg';
import { ReactComponent as RiceEmoticon } from '../../images/svg/course-title-emoticon.svg';
import { ReactComponent as CompleteBtn } from '../../images/svg/course-complete-button.svg';
import { ReactComponent as ExitBtn } from '../../images/svg/course-exit-button.svg';
import { ReactComponent as DeleteBtn } from '../../images/svg/course-delete-button.svg';
import axios from "axios";
import { changeUserInfo, reissueJWT } from '../../_actions/user_action';
import { CustomOverlayMap } from 'react-kakao-maps-sdk';

function MapCourse(props) {
  const SERVER = "eats-mate.com:8081"
  const userinfo = useSelector((state) => state.userReducer.userinfo);
  const [point, setPoint] = useState([]);
  const [title, setTitle] = useState();
  const [placeNameList, setPlaceNameList] = useState([]);
  const [placeAddressList, setPlaceAddressList] = useState([]);
  const [distanceList, setDistanceList] = useState([]);
  const [finalDistance, setFinalDistance] = useState();
  const [recommendation, setRecommendation] = useState([]);
  const [currentPos, setCurrentPos] = useState({});
  const [clickRecommendCourse, setClickRecommendCourse] = useState(null);
  const [overlayLatLng, setOverlayLatLng] = useState({lat:null, lng:null, name:null});
  const dispatch = useDispatch();

  async function checkExp() {
    if(userinfo != null) {
      const isTokenExpired = Date.now() >= userinfo.expirationTime - 10000;
      console.log('Date.now(): ', Date.now());
      console.log('exp - 10s: ', userinfo.expirationTime - 10000);
      console.log('isTokenExpired: ', isTokenExpired);
  
      if (isTokenExpired) {
        // invalid
        console.log("*** ACCESS TOKEN OUTDATED ***")
        try {
            const res = await axios.get("https://" + SERVER + "/user-service/auth/reissue",
            {
                withCredentials: true // Set-Cookie 작동을 위해 필수
            }
            );
            let redux_res = await dispatch(reissueJWT(res.data))
            if (redux_res != undefined) {
              clickCompleteBtn();
            }
            else {
              console.log("로그인 정보를 갱신하는 중입니다. 잠시만 기다려주세요.");
              setTimeout(checkExp, 200);
            }
    
        } catch(e) {
            console.log(e);
            console.log("*** REFRESH TOKEN OUTDATED ***")
            window.alert("코스를 완성하려면 로그인이 필요합니다.");  
            await logOut(); // rt outdated
        }
      }
      else {
          // valid
          console.log("*** VALID USERINFO ***")
          clickCompleteBtn();
      }
    }
    else {
      // not logged in
      console.log("*** NOT LOGGED IN ***")
      window.alert("로그인이 필요합니다.");
      await logOut(); // rt outdated
    }
  }
      
  async function logOut() {
    // logout
    try {
      const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
        {
            withCredentials: true // Set-Cookie 작동을 위해 필수
        }
      );
    } catch(e) {
        console.warn(e);
    }
    dispatch(changeUserInfo(null))
  }

  const clickCompleteBtn = () => {
    if(placeNameList.length == 1) {
      alert("코스를 완성하려면 두 개 이상의 경유지가 필요합니다.");
    }
    else {
      if (window.confirm("코스를 저장하시겠어요?")) {
        var finalTitle = "";
        if(title == undefined) {
          finalTitle = userinfo.name+"메이트님의 혼행 코스";
        } else {
          finalTitle = title;
        }

        var url = "https://" + SERVER + "/user-service/user/course/";
        var data = {
          title: finalTitle,
          placeNameList: placeNameList,
          placeAddressList: placeAddressList,
          distanceList: distanceList,
        }
        var config = {
          headers: {
            Authorization: "Bearer "+userinfo.accessToken,
          }
        }
        axios.post(url, data, config).then((res) => {
          alert("코스를 저장했어요! 마이페이지에서 확인해보세요.");
        });
      } // if-else
    }
  }; // save user course

  const clickCloseComponentBtn = (info) => {
    if (window.confirm("코스 만들기를 취소하시겠어요?")) {
      setPoint(point.filter(point => point.name == info));
      setPlaceNameList(placeNameList.filter(placeNameList => placeNameList[0] == info));
      setPlaceAddressList(placeAddressList.filter(placeAddressList => placeAddressList[0] == info));
      setDistanceList(distanceList.filter(distanceList => distanceList[0] == 1234567));

      props.closeCourseComponent();
    }
  }; // delete all point data

  const clickDeleteBtn = (info) => {
    var index = point.findIndex(point => point.name == info.name);
    placeNameList.splice(index, 1);
    placeAddressList.splice(index, 1);
    setDistanceList(distanceList.filter(distanceList => distanceList[0] == "1234567"));

    setPoint(point.filter(point => point.name !== info.name));
  };

  const onInputTitleChange = (e) => {
    setTitle(e.target.value);
  };

  function getDistanceInKm(lat1, lng1, lat2, lng2) {
    function deg2rad(deg) {
        return deg * (Math.PI/180)
    }

    var R = 6371;
    var dLat = deg2rad(lat2-lat1);
    var dLon = deg2rad(lng2-lng1);
    var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    var d = R * c;
    return d;
  };

  const onClickRecommendCourse = (info) => {
    setClickRecommendCourse(info);
    setOverlayLatLng({lat:info.lat, lng:info.lng, name:info.name});
  }

  useEffect(() => {
    props.clickRecommendCourse(clickRecommendCourse);
    setClickRecommendCourse(null);
}, [clickRecommendCourse]);

  useEffect(() => {
    props.getOverlayLatLng(overlayLatLng);
}, [overlayLatLng]);

  useEffect(() => {
    if (props.point !== null) {
      console.log(props.point.information);
      var checkName = placeNameList.find(function(data){ return data === (props.point.information.name)});
      if (checkName !== undefined) {
          alert("이미 추가된 경유지입니다.");
      } else {
        var addPoint = {
          num: props.point.information.length,
          lat: props.point.information.lat,
          lng: props.point.information.lng,
          name: props.point.information.name,
          address: props.point.information.address,
        };

        setPoint([...point, addPoint]);
        setPlaceNameList([...placeNameList, props.point.information.name]);
        setPlaceAddressList([...placeAddressList, props.point.information.address]);
      }

      // 추천 받아오기
      setCurrentPos({lat: props.point.information.lat, lng: props.point.information.lng})
      getRecommendation()
    }

    props.clearCoursePoint(); // To clear(reset) course point data

  }, [props.point]);

  async function getRecommendation() {
    try {
      const res = await axios.get("https://" + SERVER + "/map-service/tour-information/findByNearby?"
        + "lat=" + props.point.information.lat
        + "&lng=" + props.point.information.lng
        + "&dist=" + 3 // 3km
      );
      console.log(res.data)
      const selected = res.data.sort(() => .5 - Math.random()).slice(0,2)
      console.log(selected)
      setRecommendation(selected)
    } catch(e){
      throw e;
    }
  }

  useEffect(() => {
      props.drawCourse(point); // To draw course line on the map

      if(point.length >= 2) {
        var resultList = [];
        for(var i=0; i+1< point.length; i++) {
          const result = getDistanceInKm(point[i].lat, point[i].lng, point[i+1].lat, point[i+1].lng);
          const resultToMeter = result * 1000;
          resultList[i] = parseInt(resultToMeter);
        }
        setDistanceList(resultList);
      }
      props.returnCourseNum(point.length);
  }, [point]);

  // to express all course distance;
  useEffect(() => {
    var finalDistance = 0;
    for(var i=0; i < distanceList.length; i++) {
      finalDistance += distanceList[i];
    }
    if(distanceList !== undefined) {// && finalDistance != 0
      setFinalDistance(finalDistance);
    }
  }, [distanceList]);

  useEffect(() => {
    props.returnCourseNum(point.length);
  }, [props.checkCourseNum]);

  function convertDistance(distance) {
    if (distance < 1000) return distance + "m"
    else {
        return (distance / 1000).toFixed(1) + "km"
    }
  }

  return (
    <>
      <div>
        <div className={styles.courseBox} style={{bottom: placeNameList.length > 0 ? "305px" : "20px"}}>
          <div className={styles.courseBoxTitle}>
              <input
                className={styles.courseBoxInput}
                type="text"
                name="title"
                placeholder="코스 제목을 입력해주세요"
                value={title}
                size="24"
                onChange={onInputTitleChange}
              />
              {/* <RiceEmoticon
                style={{
                  width:"25px",
                  height:"25px",
                  position: "absolute",
                  right: "195px",
                  top: "25px",
              }}/> */}
              <CompleteBtn
                style={{
                  width:"110px",
                  height:"35px",
                  position: "absolute",
                  right: "62px",
                  top: "18px",
                  cursor: "pointer"
                }}
                onClick={() => checkExp()}
              />
              <div className={styles.courseDistance}>
                총 이동거리&nbsp;<b>{finalDistance}m</b>
              </div>

              <ExitBtn
                style={{
                  width:"35px",
                  height:"35px",
                  position: "absolute",
                  right: "15px",
                  top: "19px",
                  cursor: "pointer"
                }}
                onClick={() => clickCloseComponentBtn("all delete")}
              />
          </div>

          <hr/>

          <div className={styles.courseBoxContent}>
              <div className={styles.distanceList}>
              {distanceList.map((o, i) =>
                      <div className={styles.distance}><p>{convertDistance(o)}</p></div>
              )}
              <div className={styles.distance} /> {/* dummy div */}
              </div>
          
              <div className={styles.placeList}>
              {point.map((info, i) =>
                  <div className={styles.place}>
                      <div>
                          <div className={styles.courseNumber}><p>{i+1}</p></div>
                          <div className={styles.courseDash} />
                      </div>
                      <div className={styles.placeData}>
                          <div className={styles.placeName}><p>{info.name}</p></div>
                          <div className={styles.placeAddress}><p>{info.address}</p></div>
                      </div>
                      <div className={styles.courseDeleteBtn}>
                          <DeleteBtn
                            width="25"
                            height="25"
                            onClick={() => clickDeleteBtn(info)}
                          />
                      </div>
                  </div>
              )}
              </div>
          </div>
        </div>

        {placeNameList.length > 0 ?
        <div className={styles.recommendBox}>

          <div className={styles.recommendBoxTitle}>
            다음 장소로 여기는 어때요?
          </div>
          <div className={styles.recommendBoxComment}>
            다른 메이트들이 함께 추가한 장소들이에요
          </div>
          
          <div className={styles.recommendBoxContentList}>

          {recommendation.map((o,i) => {
            return (<div className={styles.recommendBoxContent}>
              <img className={styles.recommendBoxImg} src={o.represent_image != "" ? o.represent_image : "/img/map-recommend/no-image.png"} onClick={() => onClickRecommendCourse(o)} />
              <div className={styles.recommendBoxName}>{o.name}</div>
              <div className={styles.recommendBoxDistance}>
                <Pin className={styles.icon} />
                최근 코스에서&nbsp;<b>{getDistanceInKm(currentPos.lat, currentPos.lng, o.lat, o.lng).toFixed(1)}km</b>
              </div>
            </div>)
          })}

          </div>
        </div>
        : null
        }

      </div>

    </>
  );

}

export default MapCourse;import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router';
import { ReactComponent as Copy } from '../../images/svg/copy.svg';
import { ReactComponent as Address_pin } from '../../images/svg/address_pin.svg';
import { ReactComponent as Phone } from '../../images/svg/call.svg';
import { ReactComponent as Clock } from '../../images/svg/time.svg';
import { ReactComponent as Exit } from '../../images/svg/exit_button.svg';
import { ReactComponent as Back } from '../../images/svg/back.svg';

import styles from './RestInformationCard.module.css';
import useCopyClipBoard from '../etc/useCopyClipBoard';
import LikeButton from '../like/LikeButton';
import ReviewCounter from '../review/ReviewCounter';

import axios from 'axios';
import Review from '../mypage/Review';

function RestInformationCard(props) {
    const SERVER = "eats-mate.com:8081"
    const navigate = useNavigate();
    const [onClose, setOnClose] = useState(false);
    const [information, setInformation] = useState({});
    const [type, setType] = useState();
    const [isCopy, onCopy] = useCopyClipBoard();
    const [onDisplayNone, setOnDisplayNone] = useState(false);
    const [onCloseOverlay, setOnCloseOverlay] = useState(false);

    // 리뷰
    const [reviewList, setReviewList] = useState([]);
    const [rateList, setRateList] = useState([0, 0, 0]);

    async function getReviewRate() {
        try {
            const res = await axios.get('https://' + SERVER + '/review-service/review/count?place_name=' + information.name);
            setRateList(res.data);
        } catch (e) {
            throw e;
        }
    }

    async function getUserReview() {
        try {
            const res = await axios.get('https://' + SERVER + '/review-service/review/?place_name=' + information.name + '&amount=' + 2);
            res.data.forEach((e, i) => (res.data[i].createdBy = e.createdBy.replaceAll('-', '. ')));
            setReviewList(res.data);
        } catch (e) {
            throw e;
        }
    }

    useEffect(() => {
        getUserReview();
        getReviewRate();
    }, [information]);
    // end of 리뷰

    const handleCopyClipBoard = (text) => {
        onCopy(text);
    };

    useEffect(() => {
        props.propFunction(onClose);
    }, [onClose]);

    useEffect(() => {
        setInformation(props.clickInformation.information);
        setType(props.clickInformation.type);
        setOnDisplayNone(false); // 리스트 카드를 닫았더라도, 마커 클릭시에는 인포 카드가 보여지게 함
    }, [props.clickInformation]);

    const AddCourse = () => {
        props.checkCourseNum();
        if (props.courseNum !== undefined && props.courseNum == 5) {
            alert('코스 경유지는 최대 5개까지만 추가할 수 있습니다.');
        } else {
            props.clickAddCourse(props.clickInformation);
        }
    };

    const onClickBackBtn = () => {
        setOnClose(true);
        setOnCloseOverlay(true);
    };

    const onClickExitBtn = () => {
        setOnDisplayNone(true);
        setOnCloseOverlay(true);
    };

    useEffect(() => {
        if(onCloseOverlay == true) {
            props.closeOverlay(onCloseOverlay);
        }
        setOnCloseOverlay(false); // reset data
    }, [onCloseOverlay]);

    return (
        <div className={styles.card_outer}>
            <div className={onDisplayNone === true ? styles.card_display : styles.card}>
                <div className={styles.topOuter}>
                    <div className={styles.exitbutton}>
                        <button
                            onClick={() => {
                                onClickExitBtn();
                            }}
                        >
                            <Exit />
                        </button>
                    </div>
                    <div className={styles.cardTop}>
                        <div className={styles.backBtn}>
                            <button
                                onClick={() => {
                                    onClickBackBtn();
                                }}
                            >
                                <Back />
                            </button>
                        </div>
                        <div className={styles.cardTagOuter}>
                            <span className={styles.cardName}>{information.name}</span>

                            <div style={{flexShrink: "0", margin: "3px auto auto auto"}}>
                                <span className={styles.cardTag}>{information.gubun}</span>
                            </div>
                        </div>
                        <button className={styles.heart}>
                            <LikeButton placeId={information.id} />
                        </button>

                        {/* <div className={styles.cardTag}>광진구</div>  */}
                    </div>

                    <div className={styles.cardMiddle}>

                        <div className={styles.cardImg}>
                            {information.image != undefined ? (
                                <>
                                    <img src={information.image[0]} alt="first pic" />
                                    <img src={information.image[1]} alt="second pic" />
                                    <img src={information.image[2]} alt="third pic" />
                                </>
                            ) : null}
                        </div>

                        <div className={styles.divSections}></div>

                        <div className={styles.addressInfo}>
                            <div className={styles.addressTop}>
                                <div className={styles.top}>
                                    <Address_pin />
                                    <div>주소</div>
                                </div>
                                <div className={styles.bottom}>
                                    <Copy />
                                    <button className={styles.copyBtn} onClick={() => handleCopyClipBoard(information.address)}>
                                        주소복사
                                    </button>
                                </div>
                            </div>

                            <div className={styles.addressDetail}>{information.address}</div>
                        </div>
                        <hr />
                        <div className={styles.addressInfo}>
                            <div className={styles.addressTop}>
                                <div className={styles.top}>
                                    <Clock />
                                    <div>영업시간</div>
                                </div>
                            </div>

                            <div className={styles.addressDetail}>{information.usage_of_week_and_time}</div>
                        </div>
                        <hr />

                        <div className={styles.addressInfo}>
                            <div className={styles.addressTop}>
                                <div className={styles.top}>
                                    <Phone />
                                    <div>전화번호</div>
                                </div>
                            </div>

                            <div className={styles.addressDetail}>{information.cntct}</div>
                        </div>

                        <div />

                        <div className={styles.divSections}></div>
                        <div className={styles.reviews}>
                            <li className={styles.moreTab}>
                                <div className={styles.evaluate_outer}>
                                    <span className={styles.evaluate}>평가</span>
                                    <span className={styles.reviewcount}>{reviewList.length}건</span>
                                </div>
                                <div className={styles.more}>
                                    <button
                                        className={styles.morebtn}
                                        onClick={() => {
                                            navigate('/detail/' + information.name);
                                        }}
                                    >
                                        더보기 {'>'}
                                    </button>
                                </div>
                            </li>

                            <div className={styles.totalReviews}>
                                <ReviewCounter rateVal={rateList} />
                            </div>
                            <div className={styles.DetailReviews}>
                                {reviewList.map((o, i) => (
                                    <Review review={o} mypageMode={false} mappageMode={true} />
                                ))}
                            </div>
                        </div>
                    </div>

                    <div className={styles.Buttons}>
                        <button className={styles.AddCourseBtn} onClick={() => AddCourse()}>
                            나의 코스에 추가하기
                        </button>
                        {/*<img alt="add course btn" src="/img/addCourseBtn.png" height="50px" onClick={() => AddCourse()} />*/}

                        <button
                            className={styles.DetailButton}
                            onClick={() => {
                                navigate(`/detail/${information.name}`, {
                                    state: information,
                                });
                            }}
                        >
                            상세페이지 보기
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default RestInformationCard;
import { React, useState, useEffect, useContext } from 'react';
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';

import styles from './TabMenu.module.css';
import 'react-tabs/style/react-tabs.css';
import axios from 'axios';
import { ReactComponent as NoDataMark } from '../../images/svg/mark.svg';
import { SearchContext } from '../../context/SearchContext';
import { MarkerContext } from '../../context/MarkerContext';

function TabMenu(props) {
    const SERVER = "eats-mate.com:8081"
    const [selectedTab, setSelectedTab] = useState();
    const [tabData, setTabData] = useState([]);
    const [data, setData] = useState();
    const { searchInformation } = useContext(SearchContext);
    const { markerInformation, setMarkerInformation } = useContext(MarkerContext);

    let tabRef = null;

    const idx = {
        0: '전체',
        1: '음식점',
        2: '여행지',
    };

    const restaurant = {
        0: '전체',
        1: '한식',
        2: '양식',
        3: '일식',
        4: '중식',
        5: '기타',
    };

    const tour = {
        0: '전체',
        1: '관광지',
        2: '문화시설',
        3: '행사/공연/축제',
        4: '쇼핑',
    };

    const onClickItem = async (item) => {
        let data = {};

        if (item.type == '음식점') {
            const url = 'https://' + SERVER + '/map-service/getRestInfo?id=';
            data = await axios.get(url + item.id).then((res) => {
                return res.data;
            });
        } else if (item.type == '여행지') {
            const url = 'https://' + SERVER + '/map-service/getTourInfo?id=';
            data = await axios.get(url + item.id).then((res) => {
                return res.data;
            });
        }

        if (data) {
            props.setClickedInformation({
                type: item.type,
                information: data,
            });
        }
    };

    useEffect(() => {
        if (data && selectedTab !== undefined) {
            let items;

            if (selectedTab.main !== '전체' && selectedTab.sub == undefined) {
                items = data.filter((item) => item.type == selectedTab.main);
            } else {
                if (selectedTab.main == '전체') {
                    items = data;
                    //console.log(items);
                } else if (selectedTab.sub != '전체') {
                    items = data.filter((item) => item.gubun == selectedTab.sub);
                } else {
                    items = data.filter((item) => item.type == selectedTab.main);
                }
            }
            setMarkerInformation({ marker: items });
            setTabData(items);
        }
    }, [selectedTab]);

    useEffect(() => {
        setData([]); // 초기화

        const selectedIdx = searchInformation.value == '전체' ? 0 : searchInformation.value == '여행지' ? 1 : 2;

        if (tabRef) {
            switch (selectedIdx) {
                case 0:
                    tabRef.firstElementChild.firstElementChild.click();
                    break;
                case 1:
                    tabRef.firstElementChild.lastElementChild.click();
                    break;
                case 2:
                    tabRef.firstElementChild.firstElementChild.nextSibling.click();
                    break;
            }
        }

        if (props.information.length == 0) {
            setTabData([]);
            setData([]);
        } else {
            setMarkerInformation({ marker: props.information });
            setData(props.information);
            setSelectedTab({
                main: props.selectedType,
            });
        }
    }, [props.information]);

    useEffect(() => {
        //console.log(searchInformation);
    }, [searchInformation]);

    const listConstructor = (items) => {
        if (items !== undefined) {
            if (items.length == 0) {
                return (
                    <>
                        <div className={styles.markOuter}>
                            <ul>
                                <NoDataMark />
                            </ul>
                            <ul className={styles.marktext}>검색결과가 없습니다</ul>
                            <ul className={styles.marktext}>다른 키워드로 검색해보세요</ul>
                        </div>
                    </>
                );
            }
            return items.map((item) => {
                return (
                    <div className={styles.item}>
                        <p
                            className={styles.name}
                            onClick={() => {
                                onClickItem(item);
                            }}
                        >
                            {item.name}
                        </p>
                        <p className={styles.address}>{item.address}</p>
                        <hr />
                    </div>
                );
            });
        }
    };

    return (
        <>
            <Tabs
                defaultIndex={searchInformation.value == '전체' ? 0 : searchInformation.value == '음식점' ? 1 : 2}
                className={styles.tabs}
                selectedTabClassName={styles.is_selected}
                onSelect={(index) => {
                    setSelectedTab({
                        main: idx[index],
                    });
                }}
                domRef={(node) => (tabRef = node)}
            >
                <TabList>
                    <Tab className={styles.tab}>전체</Tab>
                    <Tab className={styles.tab}>음식점</Tab>
                    <Tab className={styles.tab}>여행지</Tab>
                </TabList>
                <TabPanel>
                    <div className={styles.tabpanel_all}>{listConstructor(data)}</div>
                </TabPanel>
                <TabPanel>
                    <Tabs
                        onSelect={(index) => {
                            setSelectedTab({ main: '음식점', sub: restaurant[index] });
                        }}
                        forceRenderTabPanel
                        className={styles.tabs}
                        selectedTabClassName={styles.sub_is_selected}
                    >
                        <TabList className={styles.subtab_list}>
                            <Tab className={styles.subtab_rest}>전체</Tab>
                            <Tab className={styles.subtab_rest}>한식</Tab>
                            <Tab className={styles.subtab_rest}>양식</Tab>
                            <Tab className={styles.subtab_rest}>일식</Tab>
                            <Tab className={styles.subtab_rest}>중식</Tab>
                            <Tab className={styles.subtab_rest}>기타</Tab>
                        </TabList>
                        <div className={styles.tabpanel}>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                        </div>
                    </Tabs>
                </TabPanel>
                <TabPanel>
                    <Tabs
                        forceRenderTabPanel
                        onSelect={(index) => setSelectedTab({ main: '여행지', sub: tour[index] })}
                        className={styles.tabs}
                        selectedTabClassName={styles.sub_is_selected}
                    >
                        <TabList className={styles.subtab_list}>
                            <Tab className={styles.subtab_tour}>전체</Tab>
                            <Tab className={styles.subtab_tour}>관광지</Tab>
                            <Tab className={styles.subtab_tour}>문화시설</Tab>
                            <Tab className={styles.subtab_tour}>행사/공연/축제</Tab>
                            <Tab className={styles.subtab_tour}>쇼핑</Tab>
                        </TabList>
                        <div className={styles.tabpanel}>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                            <TabPanel>{listConstructor(tabData)}</TabPanel>
                        </div>
                    </Tabs>
                </TabPanel>
            </Tabs>
        </>
    );
}

export default TabMenu;
import React, { useState, useEffect } from 'react';
import { ReactComponent as Copy } from '../../images/svg/copy.svg';
import { ReactComponent as Address_pin } from '../../images/svg/address_pin.svg';
import { ReactComponent as Clip } from '../../images/svg/clip.svg';
import { ReactComponent as Paper } from '../../images/svg/paper.svg';
import { ReactComponent as TourApi } from '../../images/svg/tourapi.svg';
import { ReactComponent as Exit } from '../../images/svg/exit_button.svg';
import { ReactComponent as Back } from '../../images/svg/back.svg';

import styles from './TourInformationCard.module.css';

function TourInformationCard(props) {
    const [onClose, setOnClose] = useState(false);
    const [information, setInformation] = useState({});
    const [type, setType] = useState();
    const [onDisplayNone, setOnDisplayNone] = useState(false);
    const [onCloseOverlay, setOnCloseOverlay] = useState(false);

    const handleCopyClipBoard = (text) => {
        navigator.clipboard.writeText(text)
        alert("복사되었습니다.")
    };

    useEffect(() => {
        props.propFunction(onClose);
    }, [onClose]);

    useEffect(() => {
        setInformation(props.clickInformation.information);
        setType(props.clickInformation.type);
        setOnDisplayNone(false); // 리스트 카드를 닫았더라도, 마커 클릭시에는 인포 카드가 보여지게 함
    }, [props.clickInformation]);

    const AddCourse = () => {
        props.checkCourseNum();
        if (props.courseNum !== undefined && props.courseNum == 5) {
            alert('코스 경유지는 최대 5개까지만 추가할 수 있습니다.');
        } else {
            props.clickAddCourse(props.clickInformation);
        }
    };

    const onClickBackBtn = () => {
        setOnClose(true);
        setOnCloseOverlay(true);
    };

    const onClickExitBtn = () => {
        setOnDisplayNone(true);
        setOnCloseOverlay(true);
    };

    useEffect(() => {
        if(onCloseOverlay == true) {
            props.closeOverlay(onCloseOverlay);
        }
        setOnCloseOverlay(false); // reset data
    }, [onCloseOverlay]);
    
    return (
        <>
            <div className={styles.card_outer}>
                <div className={onDisplayNone === true ? styles.card_display : styles.card}>
                    <div className={styles.topOuter}>
                        <div className={styles.cardTop}>
                            <div className={styles.backBtn}>
                                <button
                                    onClick={() => {
                                        onClickBackBtn();
                                    }}
                                >
                                    <Back />
                                </button>
                            </div>
                            <div className={styles.cardTagOuter}>
                                <span className={styles.cardName}>{information.name}</span>
                            </div>
                            <div className={styles.exitbutton}>
                                <button
                                    onClick={() => {
                                        onClickExitBtn();
                                    }}
                                >
                                    <Exit />
                                </button>
                            </div>

                            {/* <div className={styles.cardTag}>광진구</div>  */}
                        </div>
                        <div className={styles.cardMiddleOuter}>
                            <hr className={styles.line_hr} />
                            <div className={styles.cardMiddleScroll}>
                                {information.represent_image !== '' ? (
                                    <>
                                        <div className={styles.cardImg}>
                                            <img className={styles.tourImg} src={information.represent_image} />
                                        </div>
                                        <div className={styles.divSections}></div>
                                    </>
                                ) : null}
                                <div>
                                    <div className={styles.cardMiddle}>
                                        <div className={styles.addressInfo}>
                                            <div className={styles.addressTop_tour}>
                                                <div className={styles.top}>
                                                    <Address_pin /> <div>주소</div>
                                                </div>
                                                <div className={styles.bottom}>
                                                    <Copy />
                                                    <button
                                                        className={styles.copyBtn}
                                                        onClick={() => handleCopyClipBoard(information.address)}
                                                    >
                                                        주소복사
                                                    </button>
                                                </div>
                                            </div>

                                            <div className={styles.addressDetail}>{information.address}</div>
                                        </div>
                                        <div className={styles.overviewInfo}>
                                            <div className={styles.overview_top}>
                                                <Paper className={styles.copy} /> <div className={styles.overview_name}>장소소개</div>
                                            </div>
                                            <div className={styles.overviewDetail}>
                                                {information.overview == undefined ? (
                                                    '세부 정보가 없습니다'
                                                ) : (
                                                    <div
                                                        className={styles.overviewDetail2}
                                                        dangerouslySetInnerHTML={{ __html: information.overview }}
                                                    ></div>
                                                )}
                                            </div>
                                        </div>

                                        <div className={styles.addressInfo}>
                                            <div className={styles.addressTop_tour}>
                                                <div className={styles.top}>
                                                    <Clip className={styles.copy} /> <div className={styles.overview_name}>홈페이지</div>
                                                </div>
                                                <div className={styles.bottom_2}>
                                                    <Copy />
                                                    <button
                                                        className={styles.copyBtn}
                                                        onClick={() => handleCopyClipBoard(information.homepage)}
                                                    >
                                                        링크복사
                                                    </button>
                                                </div>
                                            </div>
                                            <div className={styles.overviewDetail}>
                                                {information.homepage == undefined ? '홈페이지 정보가 없습니다' : information.homepage}
                                            </div>
                                        </div>
                                        <div className={styles.tourapi_outer}>
                                            <div>
                                                <TourApi className={styles.tourapi} />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className={styles.Buttons}>
                                <button className={styles.AddCourseBtn} onClick={() => AddCourse()}>
                                    나의 코스에 추가하기
                                </button>
                                {/*<img alt="add course btn" src="/img/addCourseBtn.png" height="50px" onClick={() => AddCourse()} />*/}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}

export default TourInformationCard;
import React, { useEffect, useState, useRef, useContext } from 'react';
import axios from 'axios';
import styles from './Map.module.css';
import { SearchContext } from '../../context/SearchContext';

const MapSearchBar = (props) => {
    const SERVER = "eats-mate.com:8081"
    const [inputText, setInputText] = useState('');
    const [selectValue, setSelectValue] = useState('전체');
    const [information, setInformation] = useState([]); // data(restaurant, tour)
    const [showDropDown, setShowDropDown] = useState(false);
    const [text, setText] = useState('');
    const [list, setList] = useState(["강남", "용산", "신촌", "광진구", "마포구", "서대문구", "서초구"]);
    const [placeHolder, setPlaceHolder] = useState("");
    const dropDownRef = useRef();

    const { searchInformation, setSearchInformation } = useContext(SearchContext);

    const [propsItem, setPropsItem] = useState({
        info: information,
        value: selectValue,
        text: text,
    });

    useEffect(() => {
        setPropsItem({
            info: information,
            value: selectValue,
            text: text,
        });
    }, [information]);

    useEffect(() => {
        setPropsItem({
            info: information,
            value: selectValue,
            text: text,
        });
    }, [selectValue]);

    useEffect(() => {
        setSearchInformation(propsItem);
        props.propFunction(propsItem);
    }, [propsItem]);

    const selectBoxChange = (e) => {
        var value = e.target.value;
        setSelectValue(value);
    };

    const onInputTextChange = (e) => {
        setInputText(e.target.value);
    };

    const handleOnEnterKeyPress = async (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            getSearchResult();
        }
    }; // input Enter key press event function

    const handleClickSearch = async () => {
        getSearchResult();
    }

    async function getSearchResult() {
        const url = 'https://' + SERVER + '/map-service/getAllData?keyword=';
        let data = await axios.get(url + inputText).then((res) => {
            if (res.data) {
                return res.data;
            } else {
                return [];
            }
        });
        setText(inputText);
        setInformation(data);
    }

    function onClickOutside(ref) {
        useEffect(() => {
            function handleClickOutside(event) {
                if (ref.current && !ref.current.contains(event.target)) {
                    setShowDropDown(false);
                }
            }
            document.addEventListener('mousedown', handleClickOutside);
            return () => {
                document.removeEventListener('mousedown', handleClickOutside);
            };
        }, [ref]);
    }
    onClickOutside(dropDownRef);

    useEffect(() => {
        const recommendKeyword = list[Math.floor(Math.random() * list.length)];
        setPlaceHolder(recommendKeyword+"을(를) 검색해 보세요");
    }, []);

    useEffect(() => {
        //console.log(placeHolder);
    }, [placeHolder]);

    return (
        <div className={styles.search}>
            <div ref={dropDownRef}>
                <div className={styles.dropbtn} onClick={() => setShowDropDown(!showDropDown)}>
                    <div className={styles.dropbtnLabel}>{selectValue}</div>
                    <div className={styles.dropbtnIcon}>
                        {showDropDown ? (
                            <svg width="12" height="7" viewBox="0 0 12 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M0 7L12 7L6 -5.24537e-07L0 7Z" fill="white" />
                            </svg>
                        ) : (
                            <svg width="12" height="7" viewBox="0 0 12 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 0H0L6 7L12 0Z" fill="white" />
                            </svg>
                        )}
                    </div>
                </div>
                {showDropDown ? (
                    <div className={styles.dropdownContent} onClick={() => setShowDropDown(false)}>
                        <option value="전체" onClick={selectBoxChange}>
                            전체
                        </option>
                        <option value="음식점" onClick={selectBoxChange}>
                            음식점
                        </option>
                        <option value="여행지" onClick={selectBoxChange}>
                            여행지
                        </option>
                    </div>
                ) : null}
            </div>
            <div className={styles.inputBackground}>
                <input
                    type="text"
                    id="search"
                    name="search"
                    placeholder={placeHolder}
                    value={inputText}
                    onChange={onInputTextChange}
                    onKeyPress={handleOnEnterKeyPress}
                />
                <div className={styles.search_btn} onClick={() => handleClickSearch()}>
                    <img alt="sesarch icon" src="/img/search icon.png" />
                </div>
            </div>
        </div>
    );
};

export default MapSearchBar;
import React, { useState, useEffect, useContext } from 'react';
import TabMenu from './TabMenu';
import styles from './ListCard.module.css';
import { SearchContext } from '../../context/SearchContext';
import RestInformationCard from './RestInformationCard';
import TourInformationCard from './TourInformationCard';
import { ReactComponent as Exit } from '../../images/svg/exit_button.svg';
import axios from 'axios';

function ListCard(props) {
    const SERVER = "eats-mate.com:8081"
    const [information, setInformation] = useState();
    const [onClose, setOnClose] = useState(true);
    const { searchInformation } = useContext(SearchContext);
    const [courseNum, setCourseNum] = useState();
    const [overlayLatLng, setOverlayLatLng] = useState({lat:null, lng:null, name:null});
    const [onDisplayNone, setOnDisplayNone] = useState(false);
    const [onCloseOverlay, setOnCloseOverlay] = useState(false);

    const mouseOver = (e) => {
        e.preventDefault();
        e.currentTarget.style.backgroundColor = '#ccc';
    };
    const mouseLeave = (e) => {
        e.preventDefault();
        e.currentTarget.style.backgroundColor = '#fff';
    };

    const getOnClose = (close) => {
        console.log(close);
        setOnClose(close);
    };

    const clickAddCourse = (info) => {
        props.clickAddCourse(info);
    };

    const setClickedInformation = (res) => {
        setInformation(res);
        setOverlayLatLng({lat:res.information.lat, lng:res.information.lng, name:res.information.name});
        //console.log(res);
        //props.getClickInformation(res);
    }; // click information props

    useEffect(() => {
        props.getOverlayLatLng(overlayLatLng);
    }, [overlayLatLng]);

    const onClickItem = async (item) => {
        let data = {};

        if (item.type == '음식점') {
            const url = 'https://' + SERVER + '/map-service/getRestInfo?id=';
            data = await axios.get(url + item.id).then((res) => {
                return res.data;
            });
        } else if (item.type == '여행지') {
            const url = 'https://' + SERVER + '/map-service/getTourInfo?id=';
            data = await axios.get(url + item.id).then((res) => {
                return res.data;
            });
        }

        if (data) {
            setClickedInformation({
                type: item.type,
                information: data,
            });
        }
    };

    useEffect(() => {
        if(props.markerInformation.information !== null) {
            onClickItem(props.markerInformation);
        } else {}
    }, [props.markerInformation]);

    useEffect(() => {
        if (information != undefined) {
            if (onClose == true) {
                setOnClose(false);
            } else if (props.markerInformation.information !== null) {
                setOnClose(false);
                // 마커가 한 번 클릭된 뒤 다른 마커 클릭 시, 리스트 카드가 상단으로 올라와 인포 카드를 가리는 것을 방지함
            }
            else {
                setOnClose(true);
            }
        }
    }, [information]);

    useEffect(() => {
        if (props.listInformation) {
            setOnClose(true);
            setOnDisplayNone(false);
            setOnCloseOverlay(true); /* list reset, close overlay */
        }
    }, [props.listInformation]);

    useEffect(() => {
        if (props.courseNum !== undefined) {
            setCourseNum(props.courseNum);
        }
    }, [props.courseNum]);

    const checkCourseNum = () => {
        props.checkCourseNum();
    };

    const closeOverlay = (info) => {
        setOnCloseOverlay(info);
    };

    useEffect(() => {
        if(onCloseOverlay == true) {
            props.closeOverlay(onCloseOverlay);
        }
        setOnCloseOverlay(false); // reset data
    }, [onCloseOverlay]);

    return (
        <>
            {onClose ? (
                <div className={onDisplayNone === true ? styles.list_display : styles.list_outer}>
                    <div>
                        <div className={styles.cardTop}>
                            <span className={styles.result_name}>'{searchInformation.text}' 검색결과</span>
                            <span className={styles.result_tag}>{searchInformation.info.length}건</span>
                            <div className={styles.exitbutton}>
                                <button
                                    onClick={() => {
                                        setOnDisplayNone(true);
                                    }}
                                >
                                    <Exit />
                                </button>
                            </div>
                        </div>

                        <div className={styles.tabmenu_outer}>
                            <TabMenu
                                className={styles.tabmenu}
                                selectedType={props.selectedType}
                                information={props.listInformation}
                                setClickedInformation={setClickedInformation}
                            />
                        </div>
                    </div>
                </div>
            ) : information.type === '음식점' ? (
                <>
                    <RestInformationCard
                        clickInformation={information}
                        propFunction={getOnClose}
                        clickAddCourse={clickAddCourse}
                        checkCourseNum={checkCourseNum}
                        courseNum={courseNum}
                        closeOverlay={closeOverlay}
                    />
                </>
            ) : (
                <>
                    <TourInformationCard
                        clickInformation={information}
                        propFunction={getOnClose}
                        clickAddCourse={clickAddCourse}
                        checkCourseNum={checkCourseNum}
                        courseNum={courseNum}
                        closeOverlay={closeOverlay}
                    />
                </>
            )}
        </>
    );
}

export default ListCard;
/* global kakao */

import React, { useEffect, useState, useContext } from 'react';
import { Map, MapMarker, Circle, Polyline, CustomOverlayMap } from 'react-kakao-maps-sdk';
import { MarkerContext } from '../../context/MarkerContext';
import styles from './Map.module.css';

const MapContainer = (props) => {
    const [state, setState] = useState({
        // 지도의 초기 위치
        center: { lat: 37.56530579495912, lng: 126.977418939994 },
        // 지도 위치 변경시 panto를 이용할지에 대해서 정의
        isPanto: true,
    });
    //센터 이동은 한번검색에 한번만.
    //첫번째 검색결과에만 해당되도록 bool 인수 할당

    //const [nearbyRest, setNearbyRest] = useState([]);
    const [currentMarker, setCurrentMarker] = useState([]);
    const [clickMarkerInformation, setClickMarkerInformation] = useState(null);
    const [course, setCourse] = useState([]); // 사용자 맞춤 코스로 저장될 정보
    const [drawCourseLine, setDrawCourseLine] = useState(false);
    const markerInformation = useContext(MarkerContext);
    const [level, setLevel] = useState(2);
    const [radius, setRadius] = useState(5);
    const [customOverlayOpen, setCustomOverlayOpen] = useState(false);
    const [overlayLatLng, setOverlayLatLng] = useState({lat:null, lng:null, name:null});
    const [onCloseOverlay, setOnCloseOverlay] = useState(false);

    useEffect(() => {
        setDrawCourseLine(false);
        setCourse([]); // to redraw course with new point data
        setCourse(props.courseLine);
        setDrawCourseLine(true);
    }, [props.courseLine]);


    const onClickMarker = (info) => {
        setClickMarkerInformation(info);
        setOverlayLatLng({lat:info.lat, lng:info.lng, name:info.name});
    };

    useEffect(() => {
        props.clickMarker(clickMarkerInformation);
        setClickMarkerInformation(null);
    }, [clickMarkerInformation]);

    const clearClickMarker = () => {
        setClickMarkerInformation(null);
    } // function to reset click marker data

    useEffect(() => {
        if(props.overlayLatLng.lat !== null) {
            setOverlayLatLng({lat:props.overlayLatLng.lat, lng:props.overlayLatLng.lng, name:props.overlayLatLng.name});
        }
    }, [props.overlayLatLng]);

    useEffect(() => {
        if(overlayLatLng.lat !== null) {
            setCustomOverlayOpen(true);
        }
    }, [overlayLatLng]);

    useEffect(() => {
        if(props.onCloseOverlay == true) {
            setCustomOverlayOpen(false);
        }
    }, [props.onCloseOverlay]);

    /* to set circle radius with map level */
    useEffect(() => {
        switch (level) {
            case 1:
                setRadius(3);
                break;
            case 2:
                setRadius(5);
                break;
            case 3:
                setRadius(10);
                break;
            case 4:
                setRadius(15);
                break;
            case 5:
                setRadius(30);
                break;
            case 6:
                setRadius(80);
                break;
            case 7:
                setRadius(100);
                break;
            case 8:
                setRadius(160);
                break;
            default:
                setRadius(160);
                break;
          }
    }, [level]);

    const markerConstructor = (info, imgSrc) => {
        const marker = (
            <MapMarker
                position={{
                    lat: info.lat,
                    lng: info.lng,
                }}
                image={{
                    src: imgSrc, // 마커이미지의 주소입니다
                    size: {
                        width: 64,
                        height: 69,
                    }, // 마커이미지의 크기입니다
                    options: {
                        offset: {
                            x: 32,
                            y: 69,
                        }, // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.
                    },
                }}
                opacity={1}
                clickable={true}
                onClick={() => onClickMarker(info)}
                onMouseOver={(marker) => marker.setOpacity(0.5)}
                onMouseOut={(marker) => marker.setOpacity(1)}
            >
            </MapMarker>
        );
        return marker;
    };

    useEffect(() => {
        setCurrentMarker([]);
        const data = markerInformation.markerInformation.marker;
        if (data !== undefined) {
            data.map((item, idx) => {
                var imgSrc = '/img/map-marker/' + (item.type == '음식점' ? 'pin_fork' : 'pin_tour') + '.svg';
                if (idx == 0) {
                    setState({
                        center: {
                            lat: item.lat,
                            lng: item.lng,
                        },
                    });
                }
                setCurrentMarker((arr) => [
                    ...arr,
                    {
                        id: item.id,
                        data: markerConstructor(item, imgSrc),
                    },
                ]);
            });
        } else if (props.gpsInformation.lat !== 0) {
            // When the gps value changes
            setState({
                center: {
                    lat: props.gpsInformation.lat,
                    lng: props.gpsInformation.lng,
                },
                isPanto: true,
            });
        }
        //console.log(markerInformation.markerInformation);
    }, [markerInformation]);

    useEffect(() => {
        setCurrentMarker([]);
        if (props.markerInformation !== undefined) {
            props.markerInformation.map((item, idx) => {
                var imgSrc = '/img/map-marker/' + (item.type == '음식점' ? 'pin_fork' : 'pin_tour') + '.svg';
                if (idx == 0) {
                    setState({
                        center: {
                            lat: item.lat,
                            lng: item.lng,
                        },
                    });
                }
                setCurrentMarker((arr) => [
                    ...arr,
                    {
                        id: item.id,
                        data: markerConstructor(item, imgSrc),
                    },
                ]);
            });
        } else if (props.gpsInformation.lat !== 0) {
            // When the gps value changes
            setState({
                center: {
                    lat: props.gpsInformation.lat,
                    lng: props.gpsInformation.lng,
                },
                isPanto: true,
            });
        }
    }, [props.markerInformation]);

    return (
        <>
            <Map // 지도를 표시할 Container
                center={state.center}
                isPanto={state.isPanto}
                style={{
                    // 지도의 크기
                    width: '100%',
                    height: 'calc(100vh - 75px)',
                }}
                level={2} // 지도의 확대 레벨
                onZoomChanged={(map) => setLevel(map.getLevel())}
                /*onCenterChanged={(map) =>
                    setState({
                        center: {
                            lat: map.getCenter().getLat(),
                            lng: map.getCenter().getLng(),
                        },
                    })
                }*/
            >
                {currentMarker.length != 0
                    ? currentMarker.map((item) => {
                          return item.data;
                      })
                    : null}

                {drawCourseLine && (
                    <Polyline
                        path={course.map((info) => ({ lat: info.lat, lng: info.lng }))}
                        draggable={false}
                        strokeWeight={4} // 선의 두께 입니다
                        strokeColor={'#7E67F8'} // 선의 색깔입니다
                        strokeOpacity={1} // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
                        strokeStyle={'solid'} // 선의 스타일입니다
                    />
                )}

                    {course.map((info) => (
                        <Circle
                            center={{
                            lat: info.lat,
                            lng: info.lng,
                            }}
                            radius={radius}
                            strokeWeight={3} // 선의 두께입니다
                            strokeColor={"#7E67F8"} // 선의 색깔
                            strokeOpacity={1} // 선의 불투명도
                            strokeStyle={"solid"} // dash
                            fillColor={"#ffffff"} // 채우기 색깔
                            fillOpacity={1} // 채우기 불투명
                    />
                    ))}

                {customOverlayOpen === true ?
                    <CustomOverlayMap
                        position={{
                            lat:overlayLatLng.lat,
                            lng:overlayLatLng.lng
                        }}>
                        <div>
                            <div className={styles.customOverlay}>
                                {overlayLatLng.name}
                            </div>
                        </div>
                    </CustomOverlayMap>
                : null}

            </Map>
        </>
    );
};

export default MapContainer;
import React from "react";
import styles from "./Login.module.css";
import { ReactComponent as RightArrowSvg } from "../../images/svg/right-arrow.svg";
import axios from "axios";
import { useDispatch } from 'react-redux';
import { changeUserInfo } from '../../_actions/user_action';
import { useNavigate } from "react-router-dom";

function LogoutButton() {
    const SERVER = "eats-mate.com:8081"
    const dispatch = useDispatch();
    const navigate = useNavigate();

    async function handleLogout() {
        if (window.confirm('정말 로그아웃 하시겠습니까?')) {
            // logout
            try{
                const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
                    {
                        withCredentials: true // Set-Cookie 작동을 위해 필수
                    }
                );
                
            } catch(e) {
                console.warn(e);
            }
            dispatch(changeUserInfo(null))
            navigate("/")
        }
    }

    return (
        <div className={styles.logout_btn} onClick={handleLogout}>
            <div>로그아웃</div>
            <RightArrowSvg stroke="#939393"/>
        </div>
    );
}

export default LogoutButton;import React from "react";
import styles from "./Login.module.css";
import { ReactComponent as KakaoLoginSvg } from "../../images/svg/kakao-login.svg";
import MobileKakaoLogin from "../../images/mobile_kakao_login.png"


const REST_API_KEY = "c4a648b170fea0fbd26e61d052e9093b";
const REDIRECT_URI =  "https://eats-mate.com/user-service/auth/kakao";
const KAKAO_AUTH_URL = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`;

function LoginButton() {

    return (
        <a href={KAKAO_AUTH_URL}>
            <KakaoLoginSvg className={styles.kakao_btn} />
            <img className={styles.mobilelogin} alt="" src={MobileKakaoLogin} />
        </a>
    );
}

export default LoginButton;import React from "react";
import axios from 'axios';
import { useDispatch } from 'react-redux';
import { changeUserInfo } from '../../_actions/user_action';
import { useNavigate } from 'react-router-dom';

const REST_API_KEY = "c4a648b170fea0fbd26e61d052e9093b";
const REDIRECT_URI =  "https://eats-mate.com/user-service/auth/kakao";

const KakaoRedirectHandler = () => {
    const SERVER = "eats-mate.com:8081"
    const dispatch = useDispatch();
    const navigate = useNavigate();

    (async function getAccessToken() {
        let params = new URL(document.location.toString()).searchParams;
        let code = params.get("code"); // 인가코드 받는 부분
        let grant_type = "authorization_code";
        let client_id = REST_API_KEY;
    
        try {
            const kakao_res = await axios.post("https://kauth.kakao.com/oauth/token"
                + "?grant_type=" + grant_type
                + "&client_id=" + client_id
                + "&redirect_uri=" + REDIRECT_URI
                + "&code=" + code,
                {
                    headers: {'Content-type': 'application/x-www-form-urlencoded;charset=utf-8'}
                }
            );
            const res = await axios.post("https://" + SERVER + "/user-service/auth/kakao",
                {
                    access_token: kakao_res.data.access_token
                },
                {
                    withCredentials: true // Set-Cookie 작동을 위해 필수
                }
            );
            dispatch(changeUserInfo(res.data))
            navigate("/"); // 여기서 -1로 뒤로가면 윗줄에서 dispatch 한 redux state가 다시 null로 돌아감
        } catch(e) {
            console.warn(e);
            window.alert("오류가 발생했습니다. 다시 시도해주세요.");
            try {
                const res = await axios.delete("https://" + SERVER + "/user-service/auth/logout",
                    {
                        withCredentials: true // Set-Cookie 작동을 위해 필수
                    }
                ); // 가독성 떨어져서 일부러 예외처리 안함. axios 모듈화 필요
            } catch(e) {
                console.log(e)
            }
            navigate(-1);
        }
    })();

    return <div>로그인 처리 중입니다. 잠시만 기다려주세요.</div>;
};

export default KakaoRedirectHandler;